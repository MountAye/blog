{"pageProps":{"metadata":{"date":"2019-02-07","title":".py | 转载：为什么俺推荐 Python[3]·作为面向对象语言的 Python","filename":"2019-02-07-RP-why-choose-python-3-oop.md","url":"RP-why-choose-python-3-oop","layout":"post","author":"编程随想","keywords":["html","py"],"excerpt":"前一个帖子介绍了作为动态语言的 Python，今天来聊一聊 Python 在面向对象编程（OOP）方面的特色。"},"mdAst":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"文章目录","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":9,"offset":9}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#abstract","children":[{"type":"text","value":"抽象（Abstraction）","position":{"start":{"line":4,"column":4,"offset":14},"end":{"line":4,"column":19,"offset":29}}}],"position":{"start":{"line":4,"column":3,"offset":13},"end":{"line":4,"column":31,"offset":41}}}],"position":{"start":{"line":4,"column":3,"offset":13},"end":{"line":4,"column":31,"offset":41}}}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":4,"column":31,"offset":41}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#encap","children":[{"type":"text","value":"封装（Encapsulation）","position":{"start":{"line":5,"column":4,"offset":45},"end":{"line":5,"column":21,"offset":62}}}],"position":{"start":{"line":5,"column":3,"offset":44},"end":{"line":5,"column":30,"offset":71}}}],"position":{"start":{"line":5,"column":3,"offset":44},"end":{"line":5,"column":30,"offset":71}}}],"position":{"start":{"line":5,"column":1,"offset":42},"end":{"line":5,"column":30,"offset":71}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#inherit","children":[{"type":"text","value":"继承（Inheritance）","position":{"start":{"line":6,"column":4,"offset":75},"end":{"line":6,"column":19,"offset":90}}}],"position":{"start":{"line":6,"column":3,"offset":74},"end":{"line":6,"column":30,"offset":101}}}],"position":{"start":{"line":6,"column":3,"offset":74},"end":{"line":6,"column":30,"offset":101}}}],"position":{"start":{"line":6,"column":1,"offset":72},"end":{"line":6,"column":30,"offset":101}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#poly","children":[{"type":"text","value":"多态（Polymorphism）","position":{"start":{"line":7,"column":4,"offset":105},"end":{"line":7,"column":20,"offset":121}}}],"position":{"start":{"line":7,"column":3,"offset":104},"end":{"line":7,"column":28,"offset":129}}}],"position":{"start":{"line":7,"column":3,"offset":104},"end":{"line":7,"column":28,"offset":129}}}],"position":{"start":{"line":7,"column":1,"offset":102},"end":{"line":7,"column":28,"offset":129}}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#summary","children":[{"type":"text","value":"结尾","position":{"start":{"line":8,"column":4,"offset":133},"end":{"line":8,"column":6,"offset":135}}}],"position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":17,"offset":146}}}],"position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":17,"offset":146}}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":17,"offset":146}}}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":8,"column":17,"offset":146}}},{"type":"paragraph","children":[{"type":"text","value":"本系列已经中断了很长时间 :( 直到最近一个读者来信问俺，为啥不继续写，俺才突然想起这个被遗忘的系列，实在是抱歉！前一个帖子介绍了作为动态语言的 Python，今天来聊一聊 Python 在面向对象编程（OOP）方面的特色。","position":{"start":{"line":10,"column":1,"offset":148},"end":{"line":10,"column":113,"offset":260}}}],"position":{"start":{"line":10,"column":1,"offset":148},"end":{"line":10,"column":113,"offset":260}}},{"type":"paragraph","children":[{"type":"text","value":"本文主要针对那些熟悉 OOP，但还不熟悉 Python 的同学。为了让大伙儿有一个直观的认识，俺会拿 C++/Java 来进行语法上的对比。（这俩语言的名气够大，且号称支持 OO，也算有些可比性）","position":{"start":{"line":12,"column":1,"offset":262},"end":{"line":12,"column":99,"offset":360}}}],"position":{"start":{"line":12,"column":1,"offset":262},"end":{"line":12,"column":99,"offset":360}}},{"type":"paragraph","children":[{"type":"text","value":"强调一下：本文虽然拿了某些语言来作对比，但丝毫没有贬低这些语言的意思，请这些语言的粉丝们，不要对号入座 :)","position":{"start":{"line":14,"column":1,"offset":362},"end":{"line":14,"column":55,"offset":416}}}],"position":{"start":{"line":14,"column":1,"offset":362},"end":{"line":14,"column":55,"offset":416}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"抽象（Abstraction）","position":{"start":{"line":16,"column":3,"offset":420},"end":{"line":16,"column":18,"offset":435}}},{"type":"html","value":"<a name=\"abstract\">","position":{"start":{"line":16,"column":18,"offset":435},"end":{"line":16,"column":37,"offset":454}}},{"type":"html","value":"</a>","position":{"start":{"line":16,"column":37,"offset":454},"end":{"line":16,"column":41,"offset":458}}}],"position":{"start":{"line":16,"column":1,"offset":418},"end":{"line":16,"column":41,"offset":458}}},{"type":"paragraph","children":[{"type":"text","value":"但凡介绍 OOP，自然会提到抽象。因为抽象，是 OO 的第一要素，也是其它要素的基础。而提到抽象，又不免提到对象（Object）。所以，俺首先来聊一下，Python 语言是如何体现“对象”这个思想的。","position":{"start":{"line":18,"column":1,"offset":460},"end":{"line":18,"column":101,"offset":560}}}],"position":{"start":{"line":18,"column":1,"offset":460},"end":{"line":18,"column":101,"offset":560}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Python的对象","position":{"start":{"line":20,"column":4,"offset":565},"end":{"line":20,"column":13,"offset":574}}}],"position":{"start":{"line":20,"column":1,"offset":562},"end":{"line":20,"column":13,"offset":574}}},{"type":"paragraph","children":[{"type":"text","value":"如果要问俺，什么是 Python 中的对象，还真不好下一个严密又通俗易懂的定义。为了敷衍大伙儿，俺只好用一句话来概括，那就是 Python 语言中，【一切皆对象】。这句话该如何理解捏？简单来说，就是你在 Python 语言中涉及到的各种东东，都是“对象”。比如，函数是对象、各种数值（比如整数值、浮点数值、布尔值）是对象、模块（类似于 Java 的 package）是对象、None（类似于 Java 的空引用 null、C++ 的空指针 NULL）也是对象、甚至连类（class）也是对象......","position":{"start":{"line":22,"column":1,"offset":576},"end":{"line":22,"column":252,"offset":827}}}],"position":{"start":{"line":22,"column":1,"offset":576},"end":{"line":22,"column":252,"offset":827}}},{"type":"paragraph","children":[{"type":"text","value":"对比一下 C++ 和 Java 的语法：只有【类的实例】才能算得上是对象。这2个语言的基本类型（比如“int、char、float”等）不是对象，至于函数，就更算不上了。","position":{"start":{"line":24,"column":1,"offset":829},"end":{"line":24,"column":86,"offset":914}}}],"position":{"start":{"line":24,"column":1,"offset":829},"end":{"line":24,"column":86,"offset":914}}},{"type":"paragraph","children":[{"type":"text","value":"既然是一切皆对象，俺有必要稍微总结一下，Python 对象的共性，否则初学 Python 的同学还是会一头雾水。","position":{"start":{"line":26,"column":1,"offset":916},"end":{"line":26,"column":57,"offset":972}}}],"position":{"start":{"line":26,"column":1,"offset":916},"end":{"line":26,"column":57,"offset":972}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"对象的属性","position":{"start":{"line":28,"column":4,"offset":977},"end":{"line":28,"column":9,"offset":982}}}],"position":{"start":{"line":28,"column":1,"offset":974},"end":{"line":28,"column":9,"offset":982}}},{"type":"paragraph","children":[{"type":"text","value":"首先，所有的 Python 的对象，都具有若干个属性。你可以通过内置的 dir() 函数进行反射，从而了解到某个对象分别都包含哪些属性。熟悉 Java 的同学，应该明白啥是“反射”。光懂 C/C++ 的同学，如果理解上有困难，可以先参考“维基百科的解释”。","position":{"start":{"line":30,"column":1,"offset":984},"end":{"line":30,"column":129,"offset":1112}}}],"position":{"start":{"line":30,"column":1,"offset":984},"end":{"line":30,"column":129,"offset":1112}}},{"type":"paragraph","children":[{"type":"text","value":"另外，Python 还提供了若干内置的函数，用于在【运行时】操作指定对象的属性。具体如下：","position":{"start":{"line":32,"column":1,"offset":1114},"end":{"line":32,"column":46,"offset":1159}}}],"position":{"start":{"line":32,"column":1,"offset":1114},"end":{"line":32,"column":46,"offset":1159}}},{"type":"code","lang":"python","meta":null,"value":"\nhasattr(obj, name)  #判断obj对象是否具有名为name的属性\nsetattr(obj, name, value)  #设置obj对象的名为name的属性值为value\ngetattr(obj, name)  #获取obj对象的名为name的属性值\ndelattr(obj, name)  #删除obj对象的名为name的属性\n","position":{"start":{"line":34,"column":1,"offset":1161},"end":{"line":41,"column":4,"offset":1350}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"对象的类型","position":{"start":{"line":43,"column":4,"offset":1355},"end":{"line":43,"column":9,"offset":1360}}}],"position":{"start":{"line":43,"column":1,"offset":1352},"end":{"line":43,"column":9,"offset":1360}}},{"type":"paragraph","children":[{"type":"text","value":"所有的 Python 对象，都可以通过内置的 type() 函数获取该对象的类型。这实际上就是 Python 的 RTTI 机制的体现。懂 C++ 的同学，可以回忆一下 C++ 的 typeid 关键字；懂 Java 的同学，可以想一想 Java 的 instanceof 关键字。","position":{"start":{"line":45,"column":1,"offset":1362},"end":{"line":45,"column":142,"offset":1503}}}],"position":{"start":{"line":45,"column":1,"offset":1362},"end":{"line":45,"column":142,"offset":1503}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"对象的标示","position":{"start":{"line":47,"column":4,"offset":1508},"end":{"line":47,"column":9,"offset":1513}}}],"position":{"start":{"line":47,"column":1,"offset":1505},"end":{"line":47,"column":9,"offset":1513}}},{"type":"paragraph","children":[{"type":"text","value":"所有的 Python 对象，都可以通过内置的 id() 函数获取该对象的【唯一】标示。而且当一个对象创建之后，这个唯一标示就会始终保持不变。对于学过 C/C++ 的同学，不妨把这个“唯一标示”想象成该对象在内存的地址。这或许有助于你的理解 :)","position":{"start":{"line":49,"column":1,"offset":1515},"end":{"line":49,"column":123,"offset":1637}}}],"position":{"start":{"line":49,"column":1,"offset":1515},"end":{"line":49,"column":123,"offset":1637}}},{"type":"paragraph","children":[{"type":"text","value":"Python 对象还有其它一些共性，考虑到本文的扫盲性质，就不再费口水了。有兴趣的同学，可以自己找些入门书研读一番。","position":{"start":{"line":51,"column":1,"offset":1639},"end":{"line":51,"column":59,"offset":1697}}}],"position":{"start":{"line":51,"column":1,"offset":1639},"end":{"line":51,"column":59,"offset":1697}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"【一切皆对象】的好处？","position":{"start":{"line":53,"column":4,"offset":1702},"end":{"line":53,"column":15,"offset":1713}}}],"position":{"start":{"line":53,"column":1,"offset":1699},"end":{"line":53,"column":15,"offset":1713}}},{"type":"paragraph","children":[{"type":"text","value":"可能有同学会问，“一切皆对象”有啥好处捏？俺窃以为：当一切皆为对象，就可以把很多概念、操作、惯用手法统一起来，在语法层面体现出美感。","position":{"start":{"line":55,"column":1,"offset":1715},"end":{"line":55,"column":67,"offset":1781}}}],"position":{"start":{"line":55,"column":1,"offset":1715},"end":{"line":55,"column":67,"offset":1781}}},{"type":"paragraph","children":[{"type":"text","value":"下面俺举几个例子，并拿 Java 来对比一下。","position":{"start":{"line":57,"column":1,"offset":1783},"end":{"line":57,"column":24,"offset":1806}}}],"position":{"start":{"line":57,"column":1,"offset":1783},"end":{"line":57,"column":24,"offset":1806}}},{"type":"paragraph","children":[{"type":"text","value":"在 Java 里面，由于基本类型不是继承自 Object 类，引出不少麻烦。当初 Java 它爹刚开始设计容器类（比如 Vector、ArrayList ...）的时候，颇费了一番功夫。因为容器里面放置的东东必须是 Object，为了让容器能适应基本类型，只好给每一种基本类型分别对应一个派生自 Object 的包装类（Integer 类对应 int、Float 类对应 float ...）；后来又平添了自动装箱/拆箱的概念；搞来稿去，产生了 N 多复杂性。","position":{"start":{"line":59,"column":1,"offset":1808},"end":{"line":59,"column":231,"offset":2038}}}],"position":{"start":{"line":59,"column":1,"offset":1808},"end":{"line":59,"column":231,"offset":2038}}},{"type":"paragraph","children":[{"type":"text","value":"而 Python 就没有这方面的困扰。","position":{"start":{"line":61,"column":1,"offset":2040},"end":{"line":61,"column":20,"offset":2059}}}],"position":{"start":{"line":61,"column":1,"offset":2040},"end":{"line":61,"column":20,"offset":2059}}},{"type":"paragraph","children":[{"type":"text","value":"再拿刚才提及的“反射”来说事儿。虽然 Java 语言支持对象的反射，但是 Java 的 package 不是 Object，所以也就无法对 package 进行反射。反观 Python，任何一个 module（相当于 Java 的 package）import 之后，都可以直接通过前面提到的 dir() 函数进行反射，得知该 module 包含了哪些东东。仅仅需要2行代码：","position":{"start":{"line":63,"column":1,"offset":2061},"end":{"line":63,"column":189,"offset":2249}}}],"position":{"start":{"line":63,"column":1,"offset":2061},"end":{"line":63,"column":189,"offset":2249}}},{"type":"code","lang":"python","meta":null,"value":"\nimport xxx\ndir(xxx)\n","position":{"start":{"line":65,"column":1,"offset":2251},"end":{"line":70,"column":4,"offset":2286}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"封装（Encapsulation）","position":{"start":{"line":72,"column":3,"offset":2290},"end":{"line":72,"column":20,"offset":2307}}},{"type":"html","value":"<a name=\"encap\">","position":{"start":{"line":72,"column":20,"offset":2307},"end":{"line":72,"column":36,"offset":2323}}},{"type":"html","value":"</a>","position":{"start":{"line":72,"column":36,"offset":2323},"end":{"line":72,"column":40,"offset":2327}}}],"position":{"start":{"line":72,"column":1,"offset":2288},"end":{"line":72,"column":40,"offset":2327}}},{"type":"paragraph","children":[{"type":"text","value":"为了避免歧义，首先要明确一下：什么是“封装”？为了叙述方便，俺把【OOP 的封装】，分为“狭义”和“广义”两种。（关于“封装”的深入讨论，可以参见“另一篇博文”）","position":{"start":{"line":74,"column":1,"offset":2329},"end":{"line":74,"column":82,"offset":2410}}}],"position":{"start":{"line":74,"column":1,"offset":2329},"end":{"line":74,"column":82,"offset":2410}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"广义封装","position":{"start":{"line":76,"column":4,"offset":2415},"end":{"line":76,"column":8,"offset":2419}}}],"position":{"start":{"line":76,"column":1,"offset":2412},"end":{"line":76,"column":8,"offset":2419}}},{"type":"paragraph","children":[{"type":"text","value":"OOP 很强调以数据为中心。所以 OOP 的广义封装，就是把数据和操作数据的行为，打包到一起。比如 C++/Java 里的 class，可以同时包含数据成员和函数成员，就算是满足“广义的封装”了。对于 Python 而言，其 class 关键字类似于 C++ 和 Java，也已经具有“广义的封装性”了。","position":{"start":{"line":78,"column":1,"offset":2421},"end":{"line":78,"column":153,"offset":2573}}}],"position":{"start":{"line":78,"column":1,"offset":2421},"end":{"line":78,"column":153,"offset":2573}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"狭义封装","position":{"start":{"line":80,"column":4,"offset":2578},"end":{"line":80,"column":8,"offset":2582}}}],"position":{"start":{"line":80,"column":1,"offset":2575},"end":{"line":80,"column":8,"offset":2582}}},{"type":"paragraph","children":[{"type":"text","value":"而 OOP 的狭义封装，则更进一步，增加了信息隐藏（Information Hiding）。比如 C++ 和 Java 的“public、protected、private”等关键字，就是通过访问控制来达到信息隐藏的效果。Python 虽然没有针对访问控制的关键字来修饰类成员，但是 Python 采用了另外一套机制——根据命名来约定。在 Python 的对象中，如果某个属性以双下划线开头来命名（比如 __name），就能起到类似于 C++/Java 的 private 关键字的效果。","position":{"start":{"line":82,"column":1,"offset":2584},"end":{"line":82,"column":245,"offset":2828}}}],"position":{"start":{"line":82,"column":1,"offset":2584},"end":{"line":82,"column":245,"offset":2828}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"对访问控制的偏见","position":{"start":{"line":84,"column":4,"offset":2833},"end":{"line":84,"column":12,"offset":2841}}}],"position":{"start":{"line":84,"column":1,"offset":2830},"end":{"line":84,"column":12,"offset":2841}}},{"type":"paragraph","children":[{"type":"text","value":"俺曾经在某技术论坛看到有人质疑 Python 的访问控制机制，说 Python 的私有属性，可以通过反射机制绕过，因此形同虚设。在此，俺想举 C++ 和 Java 来进行反驳。","position":{"start":{"line":86,"column":1,"offset":2843},"end":{"line":86,"column":89,"offset":2931}}}],"position":{"start":{"line":86,"column":1,"offset":2843},"end":{"line":86,"column":89,"offset":2931}}},{"type":"paragraph","children":[{"type":"text","value":"在 Java 中，同样可以通过反射机制，来访问类的私有成员。至于 C++，得益于指针的强大，只要能访问某个对象（的 this 指针），通过计算该对象成员变量在内存中的偏移，一样可轻易对私有成员变量进行读写。虽然这么干挺变态滴，但技术上是可行滴。","position":{"start":{"line":88,"column":1,"offset":2933},"end":{"line":88,"column":123,"offset":3055}}}],"position":{"start":{"line":88,"column":1,"offset":2933},"end":{"line":88,"column":123,"offset":3055}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"继承（Inheritance）","position":{"start":{"line":90,"column":3,"offset":3059},"end":{"line":90,"column":18,"offset":3074}}},{"type":"html","value":"<a name=\"inherit\">","position":{"start":{"line":90,"column":18,"offset":3074},"end":{"line":90,"column":36,"offset":3092}}},{"type":"html","value":"</a>","position":{"start":{"line":90,"column":36,"offset":3092},"end":{"line":90,"column":40,"offset":3096}}}],"position":{"start":{"line":90,"column":1,"offset":3057},"end":{"line":90,"column":40,"offset":3096}}},{"type":"paragraph","children":[{"type":"text","value":"紧接着，咱再来说一下继承的话题。","position":{"start":{"line":92,"column":1,"offset":3098},"end":{"line":92,"column":17,"offset":3114}}}],"position":{"start":{"line":92,"column":1,"offset":3098},"end":{"line":92,"column":17,"offset":3114}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Python 的继承","position":{"start":{"line":94,"column":4,"offset":3119},"end":{"line":94,"column":14,"offset":3129}}}],"position":{"start":{"line":94,"column":1,"offset":3116},"end":{"line":94,"column":14,"offset":3129}}},{"type":"paragraph","children":[{"type":"text","value":"Python 没有像 Java 那样，区分出“类继承”（OO 的术语中也叫“实现继承”）和“接口继承”；也没有像 C++ 那样，区分出“公有继承、私有继承、保护继承”这么花哨的玩意儿。Python 就只有一种继承方式。","position":{"start":{"line":96,"column":1,"offset":3131},"end":{"line":96,"column":110,"offset":3240}}}],"position":{"start":{"line":96,"column":1,"offset":3131},"end":{"line":96,"column":110,"offset":3240}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"继承的语法","position":{"start":{"line":98,"column":4,"offset":3245},"end":{"line":98,"column":9,"offset":3250}}}],"position":{"start":{"line":98,"column":1,"offset":3242},"end":{"line":98,"column":9,"offset":3250}}},{"type":"paragraph","children":[{"type":"text","value":"Python 的继承语法，相比 C++/Java 而言，更加简洁。比如子类 Child 需要继承父类 Parent，代码只需如下：","position":{"start":{"line":100,"column":1,"offset":3252},"end":{"line":100,"column":66,"offset":3317}}}],"position":{"start":{"line":100,"column":1,"offset":3252},"end":{"line":100,"column":66,"offset":3317}}},{"type":"code","lang":"python","meta":null,"value":"\nclass Child(Parent) :\n    # xxxx\n","position":{"start":{"line":102,"column":1,"offset":3319},"end":{"line":107,"column":4,"offset":3367}}},{"type":"paragraph","children":[{"type":"text","value":"如果是多继承，代码大同小异：","position":{"start":{"line":109,"column":1,"offset":3369},"end":{"line":109,"column":15,"offset":3383}}}],"position":{"start":{"line":109,"column":1,"offset":3369},"end":{"line":109,"column":15,"offset":3383}}},{"type":"code","lang":"python","meta":null,"value":"\nclass Child(Parent1, Parent2, Parent3) :\n    # xxxx\n","position":{"start":{"line":111,"column":1,"offset":3385},"end":{"line":116,"column":4,"offset":3452}}},{"type":"paragraph","children":[{"type":"text","value":"假如你想知道某个类有哪些父类（基类），只需要通过 Child.","position":{"start":{"line":118,"column":1,"offset":3454},"end":{"line":118,"column":32,"offset":3485}}},{"type":"strong","children":[{"type":"text","value":"bases","position":{"start":{"line":118,"column":34,"offset":3487},"end":{"line":118,"column":39,"offset":3492}}}],"position":{"start":{"line":118,"column":32,"offset":3485},"end":{"line":118,"column":41,"offset":3494}}},{"type":"text","value":" 便可知晓。","position":{"start":{"line":118,"column":41,"offset":3494},"end":{"line":118,"column":47,"offset":3500}}}],"position":{"start":{"line":118,"column":1,"offset":3454},"end":{"line":118,"column":47,"offset":3500}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"继承的动态性","position":{"start":{"line":120,"column":4,"offset":3505},"end":{"line":120,"column":10,"offset":3511}}}],"position":{"start":{"line":120,"column":1,"offset":3502},"end":{"line":120,"column":10,"offset":3511}}},{"type":"paragraph","children":[{"type":"text","value":"其实上一个帖子已经介绍了动态改变继承关系的例子。但是考虑到上一个帖子年代久远（距本文将近1年），想必很多同学没看过或者看过又忘了。俺不妨再啰嗦一下：作为一种动态语言，Python 可以在【运行时】修改类的继承关系。这个特性比较酷，是 C++/Java 所望尘莫及滴。请看下面的例子：","position":{"start":{"line":122,"column":1,"offset":3513},"end":{"line":122,"column":142,"offset":3654}}}],"position":{"start":{"line":122,"column":1,"offset":3513},"end":{"line":122,"column":142,"offset":3654}}},{"type":"code","lang":"python","meta":null,"value":"\nclass Parent1 :\n    def dump(self) :\n        print(\"parent1\")\n\nclass Parent2 :\n    def dump(self) :\n        print(\"parent2\")\n\nclass Child :\n    def dump(self) :\n        print(\"child\")\n\nprint(Child.__bases__)\nChild.__bases__ += (Parent1, Parent2)  # 动态追加了2个父类\nprint(Child.__bases__)  # 此处打印出的父类信息中，已经包含 Parent1、Parent2\n","position":{"start":{"line":124,"column":1,"offset":3656},"end":{"line":142,"column":4,"offset":3989}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"多态（Polymorphism）","position":{"start":{"line":144,"column":3,"offset":3993},"end":{"line":144,"column":19,"offset":4009}}},{"type":"html","value":"<a name=\"poly\">","position":{"start":{"line":144,"column":19,"offset":4009},"end":{"line":144,"column":34,"offset":4024}}},{"type":"html","value":"</a>","position":{"start":{"line":144,"column":34,"offset":4024},"end":{"line":144,"column":38,"offset":4028}}}],"position":{"start":{"line":144,"column":1,"offset":3991},"end":{"line":144,"column":38,"offset":4028}}},{"type":"paragraph","children":[{"type":"text","value":"至于 Python 的多态，和传统的 OO 语言差不多，似乎没有太多值得说道的地方。俺简单举个代码作例子。为了省打字，直接复用上述的3个类，并增加一个 test() 函数如下：","position":{"start":{"line":146,"column":1,"offset":4030},"end":{"line":146,"column":89,"offset":4118}}}],"position":{"start":{"line":146,"column":1,"offset":4030},"end":{"line":146,"column":89,"offset":4118}}},{"type":"code","lang":"python","meta":null,"value":"\ndef test(obj) :\n    obj.dump()\n","position":{"start":{"line":148,"column":1,"offset":4120},"end":{"line":153,"column":4,"offset":4166}}},{"type":"paragraph","children":[{"type":"text","value":"然后对 test() 函数分别传入不同的类型的对象，输出结果俺就无需多说了吧？","position":{"start":{"line":155,"column":1,"offset":4168},"end":{"line":155,"column":40,"offset":4207}}}],"position":{"start":{"line":155,"column":1,"offset":4168},"end":{"line":155,"column":40,"offset":4207}}},{"type":"code","lang":"python","meta":null,"value":"\nc = Child()\ntest(c)  # 打印出 child\np1 = Parent1()\ntest(p1)  # 打印出 parent1\n","position":{"start":{"line":157,"column":1,"offset":4209},"end":{"line":164,"column":4,"offset":4296}}},{"type":"heading","depth":1,"children":[{"type":"text","value":"结尾","position":{"start":{"line":166,"column":3,"offset":4300},"end":{"line":166,"column":5,"offset":4302}}},{"type":"html","value":"<a name=\"summary\">","position":{"start":{"line":166,"column":5,"offset":4302},"end":{"line":166,"column":23,"offset":4320}}},{"type":"html","value":"</a>","position":{"start":{"line":166,"column":23,"offset":4320},"end":{"line":166,"column":27,"offset":4324}}}],"position":{"start":{"line":166,"column":1,"offset":4298},"end":{"line":166,"column":27,"offset":4324}}},{"type":"paragraph","children":[{"type":"text","value":"今天的话题，主要是让不熟悉 Python 的网友，对 Python 在面向对象方面的特性，有一个粗浅、感性的认识。聊完了 OOP，下一个帖子会聊一下关于 FP（函数式编程）的话题。","position":{"start":{"line":168,"column":1,"offset":4326},"end":{"line":168,"column":91,"offset":4416}}}],"position":{"start":{"line":168,"column":1,"offset":4326},"end":{"line":168,"column":91,"offset":4416}}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"RP-why-choose-python-0-overview","children":[{"type":"text","value":"回到本系列的目录","position":{"start":{"line":170,"column":2,"offset":4419},"end":{"line":170,"column":10,"offset":4427}}}],"position":{"start":{"line":170,"column":1,"offset":4418},"end":{"line":170,"column":44,"offset":4461}}}],"position":{"start":{"line":170,"column":1,"offset":4418},"end":{"line":170,"column":44,"offset":4461}}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"版权声明","position":{"start":{"line":172,"column":5,"offset":4467},"end":{"line":172,"column":9,"offset":4471}}}],"position":{"start":{"line":172,"column":3,"offset":4465},"end":{"line":172,"column":11,"offset":4473}}},{"type":"text","value":" ","position":{"start":{"line":172,"column":11,"offset":4473},"end":{"line":172,"column":12,"offset":4474}}},{"type":"html","value":"<br>","position":{"start":{"line":172,"column":12,"offset":4474},"end":{"line":172,"column":16,"offset":4478}}},{"type":"text","value":"\n本博客（编程随想的博客）所有的原创文章，原作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址: ","position":{"start":{"line":172,"column":16,"offset":4478},"end":{"line":173,"column":73,"offset":4551}}},{"type":"html","value":"<br>","position":{"start":{"line":173,"column":73,"offset":4551},"end":{"line":173,"column":77,"offset":4555}}},{"type":"text","value":"\n","position":{"start":{"line":173,"column":77,"offset":4555},"end":{"line":174,"column":1,"offset":4556}}},{"type":"link","title":null,"url":"https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html","children":[{"type":"text","value":"https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html","position":{"start":{"line":174,"column":4,"offset":4559},"end":{"line":174,"column":75,"offset":4630}}}],"position":{"start":{"line":174,"column":3,"offset":4558},"end":{"line":174,"column":149,"offset":4704}}}],"position":{"start":{"line":172,"column":3,"offset":4465},"end":{"line":174,"column":149,"offset":4704}}}],"position":{"start":{"line":172,"column":1,"offset":4463},"end":{"line":174,"column":149,"offset":4704}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":175,"column":1,"offset":4705}}},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h3","properties":{"id":"文章目录"},"children":[{"type":"element","tagName":"a","properties":{"href":"#文章目录"},"children":[{"type":"text","value":"文章目录","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":9,"offset":9}}}]}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#abstract"},"children":[{"type":"text","value":"抽象（Abstraction）","position":{"start":{"line":4,"column":4,"offset":14},"end":{"line":4,"column":19,"offset":29}}}],"position":{"start":{"line":4,"column":3,"offset":13},"end":{"line":4,"column":31,"offset":41}}}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":4,"column":31,"offset":41}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#encap"},"children":[{"type":"text","value":"封装（Encapsulation）","position":{"start":{"line":5,"column":4,"offset":45},"end":{"line":5,"column":21,"offset":62}}}],"position":{"start":{"line":5,"column":3,"offset":44},"end":{"line":5,"column":30,"offset":71}}}],"position":{"start":{"line":5,"column":1,"offset":42},"end":{"line":5,"column":30,"offset":71}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#inherit"},"children":[{"type":"text","value":"继承（Inheritance）","position":{"start":{"line":6,"column":4,"offset":75},"end":{"line":6,"column":19,"offset":90}}}],"position":{"start":{"line":6,"column":3,"offset":74},"end":{"line":6,"column":30,"offset":101}}}],"position":{"start":{"line":6,"column":1,"offset":72},"end":{"line":6,"column":30,"offset":101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#poly"},"children":[{"type":"text","value":"多态（Polymorphism）","position":{"start":{"line":7,"column":4,"offset":105},"end":{"line":7,"column":20,"offset":121}}}],"position":{"start":{"line":7,"column":3,"offset":104},"end":{"line":7,"column":28,"offset":129}}}],"position":{"start":{"line":7,"column":1,"offset":102},"end":{"line":7,"column":28,"offset":129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#summary"},"children":[{"type":"text","value":"结尾","position":{"start":{"line":8,"column":4,"offset":133},"end":{"line":8,"column":6,"offset":135}}}],"position":{"start":{"line":8,"column":3,"offset":132},"end":{"line":8,"column":17,"offset":146}}}],"position":{"start":{"line":8,"column":1,"offset":130},"end":{"line":8,"column":17,"offset":146}}},{"type":"text","value":"\n"}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":8,"column":17,"offset":146}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本系列已经中断了很长时间 :( 直到最近一个读者来信问俺，为啥不继续写，俺才突然想起这个被遗忘的系列，实在是抱歉！前一个帖子介绍了作为动态语言的 Python，今天来聊一聊 Python 在面向对象编程（OOP）方面的特色。","position":{"start":{"line":10,"column":1,"offset":148},"end":{"line":10,"column":113,"offset":260}}}],"position":{"start":{"line":10,"column":1,"offset":148},"end":{"line":10,"column":113,"offset":260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本文主要针对那些熟悉 OOP，但还不熟悉 Python 的同学。为了让大伙儿有一个直观的认识，俺会拿 C++/Java 来进行语法上的对比。（这俩语言的名气够大，且号称支持 OO，也算有些可比性）","position":{"start":{"line":12,"column":1,"offset":262},"end":{"line":12,"column":99,"offset":360}}}],"position":{"start":{"line":12,"column":1,"offset":262},"end":{"line":12,"column":99,"offset":360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"强调一下：本文虽然拿了某些语言来作对比，但丝毫没有贬低这些语言的意思，请这些语言的粉丝们，不要对号入座 :)","position":{"start":{"line":14,"column":1,"offset":362},"end":{"line":14,"column":55,"offset":416}}}],"position":{"start":{"line":14,"column":1,"offset":362},"end":{"line":14,"column":55,"offset":416}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"抽象abstraction"},"children":[{"type":"element","tagName":"a","properties":{"href":"#抽象abstraction"},"children":[{"type":"text","value":"抽象（Abstraction）","position":{"start":{"line":16,"column":3,"offset":420},"end":{"line":16,"column":18,"offset":435}}}]}],"position":{"start":{"line":16,"column":1,"offset":418},"end":{"line":16,"column":41,"offset":458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但凡介绍 OOP，自然会提到抽象。因为抽象，是 OO 的第一要素，也是其它要素的基础。而提到抽象，又不免提到对象（Object）。所以，俺首先来聊一下，Python 语言是如何体现“对象”这个思想的。","position":{"start":{"line":18,"column":1,"offset":460},"end":{"line":18,"column":101,"offset":560}}}],"position":{"start":{"line":18,"column":1,"offset":460},"end":{"line":18,"column":101,"offset":560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"python的对象"},"children":[{"type":"element","tagName":"a","properties":{"href":"#python的对象"},"children":[{"type":"text","value":"Python的对象","position":{"start":{"line":20,"column":4,"offset":565},"end":{"line":20,"column":13,"offset":574}}}]}],"position":{"start":{"line":20,"column":1,"offset":562},"end":{"line":20,"column":13,"offset":574}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果要问俺，什么是 Python 中的对象，还真不好下一个严密又通俗易懂的定义。为了敷衍大伙儿，俺只好用一句话来概括，那就是 Python 语言中，【一切皆对象】。这句话该如何理解捏？简单来说，就是你在 Python 语言中涉及到的各种东东，都是“对象”。比如，函数是对象、各种数值（比如整数值、浮点数值、布尔值）是对象、模块（类似于 Java 的 package）是对象、None（类似于 Java 的空引用 null、C++ 的空指针 NULL）也是对象、甚至连类（class）也是对象......","position":{"start":{"line":22,"column":1,"offset":576},"end":{"line":22,"column":252,"offset":827}}}],"position":{"start":{"line":22,"column":1,"offset":576},"end":{"line":22,"column":252,"offset":827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对比一下 C++ 和 Java 的语法：只有【类的实例】才能算得上是对象。这2个语言的基本类型（比如“int、char、float”等）不是对象，至于函数，就更算不上了。","position":{"start":{"line":24,"column":1,"offset":829},"end":{"line":24,"column":86,"offset":914}}}],"position":{"start":{"line":24,"column":1,"offset":829},"end":{"line":24,"column":86,"offset":914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"既然是一切皆对象，俺有必要稍微总结一下，Python 对象的共性，否则初学 Python 的同学还是会一头雾水。","position":{"start":{"line":26,"column":1,"offset":916},"end":{"line":26,"column":57,"offset":972}}}],"position":{"start":{"line":26,"column":1,"offset":916},"end":{"line":26,"column":57,"offset":972}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"对象的属性"},"children":[{"type":"element","tagName":"a","properties":{"href":"#对象的属性"},"children":[{"type":"text","value":"对象的属性","position":{"start":{"line":28,"column":4,"offset":977},"end":{"line":28,"column":9,"offset":982}}}]}],"position":{"start":{"line":28,"column":1,"offset":974},"end":{"line":28,"column":9,"offset":982}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先，所有的 Python 的对象，都具有若干个属性。你可以通过内置的 dir() 函数进行反射，从而了解到某个对象分别都包含哪些属性。熟悉 Java 的同学，应该明白啥是“反射”。光懂 C/C++ 的同学，如果理解上有困难，可以先参考“维基百科的解释”。","position":{"start":{"line":30,"column":1,"offset":984},"end":{"line":30,"column":129,"offset":1112}}}],"position":{"start":{"line":30,"column":1,"offset":984},"end":{"line":30,"column":129,"offset":1112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外，Python 还提供了若干内置的函数，用于在【运行时】操作指定对象的属性。具体如下：","position":{"start":{"line":32,"column":1,"offset":1114},"end":{"line":32,"column":46,"offset":1159}}}],"position":{"start":{"line":32,"column":1,"offset":1114},"end":{"line":32,"column":46,"offset":1159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"hasattr"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(obj, name)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"#判断obj对象是否具有名为name的属性"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"setattr"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(obj, name, value)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"#设置obj对象的名为name的属性值为value"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"getattr"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(obj, name)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"#获取obj对象的名为name的属性值"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"delattr"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(obj, name)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"#删除obj对象的名为name的属性"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"对象的类型"},"children":[{"type":"element","tagName":"a","properties":{"href":"#对象的类型"},"children":[{"type":"text","value":"对象的类型","position":{"start":{"line":43,"column":4,"offset":1355},"end":{"line":43,"column":9,"offset":1360}}}]}],"position":{"start":{"line":43,"column":1,"offset":1352},"end":{"line":43,"column":9,"offset":1360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所有的 Python 对象，都可以通过内置的 type() 函数获取该对象的类型。这实际上就是 Python 的 RTTI 机制的体现。懂 C++ 的同学，可以回忆一下 C++ 的 typeid 关键字；懂 Java 的同学，可以想一想 Java 的 instanceof 关键字。","position":{"start":{"line":45,"column":1,"offset":1362},"end":{"line":45,"column":142,"offset":1503}}}],"position":{"start":{"line":45,"column":1,"offset":1362},"end":{"line":45,"column":142,"offset":1503}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"对象的标示"},"children":[{"type":"element","tagName":"a","properties":{"href":"#对象的标示"},"children":[{"type":"text","value":"对象的标示","position":{"start":{"line":47,"column":4,"offset":1508},"end":{"line":47,"column":9,"offset":1513}}}]}],"position":{"start":{"line":47,"column":1,"offset":1505},"end":{"line":47,"column":9,"offset":1513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所有的 Python 对象，都可以通过内置的 id() 函数获取该对象的【唯一】标示。而且当一个对象创建之后，这个唯一标示就会始终保持不变。对于学过 C/C++ 的同学，不妨把这个“唯一标示”想象成该对象在内存的地址。这或许有助于你的理解 :)","position":{"start":{"line":49,"column":1,"offset":1515},"end":{"line":49,"column":123,"offset":1637}}}],"position":{"start":{"line":49,"column":1,"offset":1515},"end":{"line":49,"column":123,"offset":1637}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 对象还有其它一些共性，考虑到本文的扫盲性质，就不再费口水了。有兴趣的同学，可以自己找些入门书研读一番。","position":{"start":{"line":51,"column":1,"offset":1639},"end":{"line":51,"column":59,"offset":1697}}}],"position":{"start":{"line":51,"column":1,"offset":1639},"end":{"line":51,"column":59,"offset":1697}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"一切皆对象的好处"},"children":[{"type":"element","tagName":"a","properties":{"href":"#一切皆对象的好处"},"children":[{"type":"text","value":"【一切皆对象】的好处？","position":{"start":{"line":53,"column":4,"offset":1702},"end":{"line":53,"column":15,"offset":1713}}}]}],"position":{"start":{"line":53,"column":1,"offset":1699},"end":{"line":53,"column":15,"offset":1713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可能有同学会问，“一切皆对象”有啥好处捏？俺窃以为：当一切皆为对象，就可以把很多概念、操作、惯用手法统一起来，在语法层面体现出美感。","position":{"start":{"line":55,"column":1,"offset":1715},"end":{"line":55,"column":67,"offset":1781}}}],"position":{"start":{"line":55,"column":1,"offset":1715},"end":{"line":55,"column":67,"offset":1781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面俺举几个例子，并拿 Java 来对比一下。","position":{"start":{"line":57,"column":1,"offset":1783},"end":{"line":57,"column":24,"offset":1806}}}],"position":{"start":{"line":57,"column":1,"offset":1783},"end":{"line":57,"column":24,"offset":1806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Java 里面，由于基本类型不是继承自 Object 类，引出不少麻烦。当初 Java 它爹刚开始设计容器类（比如 Vector、ArrayList ...）的时候，颇费了一番功夫。因为容器里面放置的东东必须是 Object，为了让容器能适应基本类型，只好给每一种基本类型分别对应一个派生自 Object 的包装类（Integer 类对应 int、Float 类对应 float ...）；后来又平添了自动装箱/拆箱的概念；搞来稿去，产生了 N 多复杂性。","position":{"start":{"line":59,"column":1,"offset":1808},"end":{"line":59,"column":231,"offset":2038}}}],"position":{"start":{"line":59,"column":1,"offset":1808},"end":{"line":59,"column":231,"offset":2038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"而 Python 就没有这方面的困扰。","position":{"start":{"line":61,"column":1,"offset":2040},"end":{"line":61,"column":20,"offset":2059}}}],"position":{"start":{"line":61,"column":1,"offset":2040},"end":{"line":61,"column":20,"offset":2059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"再拿刚才提及的“反射”来说事儿。虽然 Java 语言支持对象的反射，但是 Java 的 package 不是 Object，所以也就无法对 package 进行反射。反观 Python，任何一个 module（相当于 Java 的 package）import 之后，都可以直接通过前面提到的 dir() 函数进行反射，得知该 module 包含了哪些东东。仅仅需要2行代码：","position":{"start":{"line":63,"column":1,"offset":2061},"end":{"line":63,"column":189,"offset":2249}}}],"position":{"start":{"line":63,"column":1,"offset":2061},"end":{"line":63,"column":189,"offset":2249}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"import"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" xxx"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"dir"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(xxx)"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"封装encapsulation"},"children":[{"type":"element","tagName":"a","properties":{"href":"#封装encapsulation"},"children":[{"type":"text","value":"封装（Encapsulation）","position":{"start":{"line":72,"column":3,"offset":2290},"end":{"line":72,"column":20,"offset":2307}}}]}],"position":{"start":{"line":72,"column":1,"offset":2288},"end":{"line":72,"column":40,"offset":2327}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为了避免歧义，首先要明确一下：什么是“封装”？为了叙述方便，俺把【OOP 的封装】，分为“狭义”和“广义”两种。（关于“封装”的深入讨论，可以参见“另一篇博文”）","position":{"start":{"line":74,"column":1,"offset":2329},"end":{"line":74,"column":82,"offset":2410}}}],"position":{"start":{"line":74,"column":1,"offset":2329},"end":{"line":74,"column":82,"offset":2410}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"广义封装"},"children":[{"type":"element","tagName":"a","properties":{"href":"#广义封装"},"children":[{"type":"text","value":"广义封装","position":{"start":{"line":76,"column":4,"offset":2415},"end":{"line":76,"column":8,"offset":2419}}}]}],"position":{"start":{"line":76,"column":1,"offset":2412},"end":{"line":76,"column":8,"offset":2419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"OOP 很强调以数据为中心。所以 OOP 的广义封装，就是把数据和操作数据的行为，打包到一起。比如 C++/Java 里的 class，可以同时包含数据成员和函数成员，就算是满足“广义的封装”了。对于 Python 而言，其 class 关键字类似于 C++ 和 Java，也已经具有“广义的封装性”了。","position":{"start":{"line":78,"column":1,"offset":2421},"end":{"line":78,"column":153,"offset":2573}}}],"position":{"start":{"line":78,"column":1,"offset":2421},"end":{"line":78,"column":153,"offset":2573}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"狭义封装"},"children":[{"type":"element","tagName":"a","properties":{"href":"#狭义封装"},"children":[{"type":"text","value":"狭义封装","position":{"start":{"line":80,"column":4,"offset":2578},"end":{"line":80,"column":8,"offset":2582}}}]}],"position":{"start":{"line":80,"column":1,"offset":2575},"end":{"line":80,"column":8,"offset":2582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"而 OOP 的狭义封装，则更进一步，增加了信息隐藏（Information Hiding）。比如 C++ 和 Java 的“public、protected、private”等关键字，就是通过访问控制来达到信息隐藏的效果。Python 虽然没有针对访问控制的关键字来修饰类成员，但是 Python 采用了另外一套机制——根据命名来约定。在 Python 的对象中，如果某个属性以双下划线开头来命名（比如 __name），就能起到类似于 C++/Java 的 private 关键字的效果。","position":{"start":{"line":82,"column":1,"offset":2584},"end":{"line":82,"column":245,"offset":2828}}}],"position":{"start":{"line":82,"column":1,"offset":2584},"end":{"line":82,"column":245,"offset":2828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"对访问控制的偏见"},"children":[{"type":"element","tagName":"a","properties":{"href":"#对访问控制的偏见"},"children":[{"type":"text","value":"对访问控制的偏见","position":{"start":{"line":84,"column":4,"offset":2833},"end":{"line":84,"column":12,"offset":2841}}}]}],"position":{"start":{"line":84,"column":1,"offset":2830},"end":{"line":84,"column":12,"offset":2841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"俺曾经在某技术论坛看到有人质疑 Python 的访问控制机制，说 Python 的私有属性，可以通过反射机制绕过，因此形同虚设。在此，俺想举 C++ 和 Java 来进行反驳。","position":{"start":{"line":86,"column":1,"offset":2843},"end":{"line":86,"column":89,"offset":2931}}}],"position":{"start":{"line":86,"column":1,"offset":2843},"end":{"line":86,"column":89,"offset":2931}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在 Java 中，同样可以通过反射机制，来访问类的私有成员。至于 C++，得益于指针的强大，只要能访问某个对象（的 this 指针），通过计算该对象成员变量在内存中的偏移，一样可轻易对私有成员变量进行读写。虽然这么干挺变态滴，但技术上是可行滴。","position":{"start":{"line":88,"column":1,"offset":2933},"end":{"line":88,"column":123,"offset":3055}}}],"position":{"start":{"line":88,"column":1,"offset":2933},"end":{"line":88,"column":123,"offset":3055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"继承inheritance"},"children":[{"type":"element","tagName":"a","properties":{"href":"#继承inheritance"},"children":[{"type":"text","value":"继承（Inheritance）","position":{"start":{"line":90,"column":3,"offset":3059},"end":{"line":90,"column":18,"offset":3074}}}]}],"position":{"start":{"line":90,"column":1,"offset":3057},"end":{"line":90,"column":40,"offset":3096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"紧接着，咱再来说一下继承的话题。","position":{"start":{"line":92,"column":1,"offset":3098},"end":{"line":92,"column":17,"offset":3114}}}],"position":{"start":{"line":92,"column":1,"offset":3098},"end":{"line":92,"column":17,"offset":3114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"python-的继承"},"children":[{"type":"element","tagName":"a","properties":{"href":"#python-的继承"},"children":[{"type":"text","value":"Python 的继承","position":{"start":{"line":94,"column":4,"offset":3119},"end":{"line":94,"column":14,"offset":3129}}}]}],"position":{"start":{"line":94,"column":1,"offset":3116},"end":{"line":94,"column":14,"offset":3129}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 没有像 Java 那样，区分出“类继承”（OO 的术语中也叫“实现继承”）和“接口继承”；也没有像 C++ 那样，区分出“公有继承、私有继承、保护继承”这么花哨的玩意儿。Python 就只有一种继承方式。","position":{"start":{"line":96,"column":1,"offset":3131},"end":{"line":96,"column":110,"offset":3240}}}],"position":{"start":{"line":96,"column":1,"offset":3131},"end":{"line":96,"column":110,"offset":3240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"继承的语法"},"children":[{"type":"element","tagName":"a","properties":{"href":"#继承的语法"},"children":[{"type":"text","value":"继承的语法","position":{"start":{"line":98,"column":4,"offset":3245},"end":{"line":98,"column":9,"offset":3250}}}]}],"position":{"start":{"line":98,"column":1,"offset":3242},"end":{"line":98,"column":9,"offset":3250}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Python 的继承语法，相比 C++/Java 而言，更加简洁。比如子类 Child 需要继承父类 Parent，代码只需如下：","position":{"start":{"line":100,"column":1,"offset":3252},"end":{"line":100,"column":66,"offset":3317}}}],"position":{"start":{"line":100,"column":1,"offset":3252},"end":{"line":100,"column":66,"offset":3317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"class"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" Child"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":"Parent"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":") :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"    # xxxx"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果是多继承，代码大同小异：","position":{"start":{"line":109,"column":1,"offset":3369},"end":{"line":109,"column":15,"offset":3383}}}],"position":{"start":{"line":109,"column":1,"offset":3369},"end":{"line":109,"column":15,"offset":3383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"class"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" Child"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":"Parent1"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":", "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":"Parent2"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":", "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":"Parent3"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":") :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"    # xxxx"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假如你想知道某个类有哪些父类（基类），只需要通过 Child.","position":{"start":{"line":118,"column":1,"offset":3454},"end":{"line":118,"column":32,"offset":3485}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"bases","position":{"start":{"line":118,"column":34,"offset":3487},"end":{"line":118,"column":39,"offset":3492}}}],"position":{"start":{"line":118,"column":32,"offset":3485},"end":{"line":118,"column":41,"offset":3494}}},{"type":"text","value":" 便可知晓。","position":{"start":{"line":118,"column":41,"offset":3494},"end":{"line":118,"column":47,"offset":3500}}}],"position":{"start":{"line":118,"column":1,"offset":3454},"end":{"line":118,"column":47,"offset":3500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"继承的动态性"},"children":[{"type":"element","tagName":"a","properties":{"href":"#继承的动态性"},"children":[{"type":"text","value":"继承的动态性","position":{"start":{"line":120,"column":4,"offset":3505},"end":{"line":120,"column":10,"offset":3511}}}]}],"position":{"start":{"line":120,"column":1,"offset":3502},"end":{"line":120,"column":10,"offset":3511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其实上一个帖子已经介绍了动态改变继承关系的例子。但是考虑到上一个帖子年代久远（距本文将近1年），想必很多同学没看过或者看过又忘了。俺不妨再啰嗦一下：作为一种动态语言，Python 可以在【运行时】修改类的继承关系。这个特性比较酷，是 C++/Java 所望尘莫及滴。请看下面的例子：","position":{"start":{"line":122,"column":1,"offset":3513},"end":{"line":122,"column":142,"offset":3654}}}],"position":{"start":{"line":122,"column":1,"offset":3513},"end":{"line":122,"column":142,"offset":3654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"class"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" Parent1"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"    def"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" dump"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(self) :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"        print"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"style":"color:#032F62;--shiki-dark:#9ECBFF"},"children":[{"type":"text","value":"\"parent1\""}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"class"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" Parent2"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"    def"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" dump"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(self) :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"        print"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"style":"color:#032F62;--shiki-dark:#9ECBFF"},"children":[{"type":"text","value":"\"parent2\""}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"class"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" Child"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"    def"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" dump"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(self) :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"        print"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"style":"color:#032F62;--shiki-dark:#9ECBFF"},"children":[{"type":"text","value":"\"child\""}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"print"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(Child."}]},{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"__bases__"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":")"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"Child."}]},{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"__bases__"}]},{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":" +="}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" (Parent1, Parent2)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"# 动态追加了2个父类"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"print"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(Child."}]},{"type":"element","tagName":"span","properties":{"style":"color:#005CC5;--shiki-dark:#79B8FF"},"children":[{"type":"text","value":"__bases__"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":")  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"# 此处打印出的父类信息中，已经包含 Parent1、Parent2"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"多态polymorphism"},"children":[{"type":"element","tagName":"a","properties":{"href":"#多态polymorphism"},"children":[{"type":"text","value":"多态（Polymorphism）","position":{"start":{"line":144,"column":3,"offset":3993},"end":{"line":144,"column":19,"offset":4009}}}]}],"position":{"start":{"line":144,"column":1,"offset":3991},"end":{"line":144,"column":38,"offset":4028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"至于 Python 的多态，和传统的 OO 语言差不多，似乎没有太多值得说道的地方。俺简单举个代码作例子。为了省打字，直接复用上述的3个类，并增加一个 test() 函数如下：","position":{"start":{"line":146,"column":1,"offset":4030},"end":{"line":146,"column":89,"offset":4118}}}],"position":{"start":{"line":146,"column":1,"offset":4030},"end":{"line":146,"column":89,"offset":4118}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"def"}]},{"type":"element","tagName":"span","properties":{"style":"color:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":" test"}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"(obj) :"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"    obj.dump()"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后对 test() 函数分别传入不同的类型的对象，输出结果俺就无需多说了吧？","position":{"start":{"line":155,"column":1,"offset":4168},"end":{"line":155,"column":40,"offset":4207}}}],"position":{"start":{"line":155,"column":1,"offset":4168},"end":{"line":155,"column":40,"offset":4207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"class":"shiki shiki-themes github-light github-dark","style":"background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8","tabindex":"0"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"c "}]},{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" Child()"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"test(c)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"# 打印出 child"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"p1 "}]},{"type":"element","tagName":"span","properties":{"style":"color:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" Parent1()"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[{"type":"element","tagName":"span","properties":{"style":"color:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":"test(p1)  "}]},{"type":"element","tagName":"span","properties":{"style":"color:#6A737D;--shiki-dark:#6A737D"},"children":[{"type":"text","value":"# 打印出 parent1"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"class":"line"},"children":[]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"结尾"},"children":[{"type":"element","tagName":"a","properties":{"href":"#结尾"},"children":[{"type":"text","value":"结尾","position":{"start":{"line":166,"column":3,"offset":4300},"end":{"line":166,"column":5,"offset":4302}}}]}],"position":{"start":{"line":166,"column":1,"offset":4298},"end":{"line":166,"column":27,"offset":4324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"今天的话题，主要是让不熟悉 Python 的网友，对 Python 在面向对象方面的特性，有一个粗浅、感性的认识。聊完了 OOP，下一个帖子会聊一下关于 FP（函数式编程）的话题。","position":{"start":{"line":168,"column":1,"offset":4326},"end":{"line":168,"column":91,"offset":4416}}}],"position":{"start":{"line":168,"column":1,"offset":4326},"end":{"line":168,"column":91,"offset":4416}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"RP-why-choose-python-0-overview"},"children":[{"type":"text","value":"回到本系列的目录","position":{"start":{"line":170,"column":2,"offset":4419},"end":{"line":170,"column":10,"offset":4427}}}],"position":{"start":{"line":170,"column":1,"offset":4418},"end":{"line":170,"column":44,"offset":4461}}}],"position":{"start":{"line":170,"column":1,"offset":4418},"end":{"line":170,"column":44,"offset":4461}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"版权声明","position":{"start":{"line":172,"column":5,"offset":4467},"end":{"line":172,"column":9,"offset":4471}}}],"position":{"start":{"line":172,"column":3,"offset":4465},"end":{"line":172,"column":11,"offset":4473}}},{"type":"text","value":" ","position":{"start":{"line":172,"column":11,"offset":4473},"end":{"line":172,"column":12,"offset":4474}}},{"type":"text","value":"\n本博客（编程随想的博客）所有的原创文章，原作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者编程随想和本文原始地址: ","position":{"start":{"line":172,"column":16,"offset":4478},"end":{"line":173,"column":73,"offset":4551}}},{"type":"text","value":"\n","position":{"start":{"line":173,"column":77,"offset":4555},"end":{"line":174,"column":1,"offset":4556}}},{"type":"element","tagName":"a","properties":{"href":"https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html"},"children":[{"type":"text","value":"https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html","position":{"start":{"line":174,"column":4,"offset":4559},"end":{"line":174,"column":75,"offset":4630}}}],"position":{"start":{"line":174,"column":3,"offset":4558},"end":{"line":174,"column":149,"offset":4704}}}],"position":{"start":{"line":172,"column":3,"offset":4465},"end":{"line":174,"column":149,"offset":4704}}},{"type":"text","value":"\n"}],"position":{"start":{"line":172,"column":1,"offset":4463},"end":{"line":174,"column":149,"offset":4704}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":175,"column":1,"offset":4705}}}},"__N_SSG":true}