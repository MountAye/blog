<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>阿掖山：一个博客</title>
    <description>智力活动是一种生活态度</description>
    <link>https://mountaye.github.io/blog/</link>
    <atom:link href="https://mountaye.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 21 Jan 2022 16:19:34 -0600</pubDate>
    <lastBuildDate>Fri, 21 Jan 2022 16:19:34 -0600</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>.pdf | 《三体》摘抄·《I.地球往事》</title>
        <description>&lt;p&gt;《三体》的大名应该不局限于科幻迷群体了吧。&lt;/p&gt;

&lt;p&gt;博客改版之后，首页用来展示随机格言的空间大了许多，于是决定再略读一遍《三体》，从中摘录一些句子放在博客首页。所以这份摘抄完全以适合单句展示为标准。&lt;/p&gt;

&lt;p&gt;我不确定摘抄的篇幅应以多少字为限，因为这毕竟是一部小说，每个段落都是故事整体的一部分，都与不同距离的多段上下文相呼应，很容易越抄越长。虽然这个摘抄主要是用于博客主页的随机格言，理论上有一整个屏幕的空间，但是还是应该尽量简短。&lt;/p&gt;

&lt;p&gt;文中的话绝大多数出自某个角色的对白或独白，并不代表作者本人的观点，甚至不代表这部作品的观点；另一方面，这些引文要和其他地方搜罗来的句子放在一起，不适合在破折号后面写说这些话的角色名字。如何处理这种引语，我想了很多办法，最后的选择是在引文的开头写上说话或独白的角色，用冒号隔开。引文不加引号，以区分原文中的对话。&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;叶哲泰的岳父：可是搞基础理论，不笨不行啊。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.1 疯狂年代》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;叶哲泰：在中国，任何超脱飞扬的思想都会砰然坠地的，现实的引力太沉重了。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.1 疯狂年代》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;“是哲学指引实验还是实验指引哲学？”叶哲泰问道，他这突然的反击令批判者们一时不知所措。&lt;/p&gt;

  &lt;p&gt;“当然是正确的马克思主义哲学指引科学实验！”一名男红卫兵说。&lt;/p&gt;

  &lt;p&gt;“这等于说正确的哲学是从天上掉下来的，这反对实践出真知，恰恰是违背马克思主义对自然界的认知原则的。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.1 疯狂年代》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;与这广阔天地相比，内地最大的城市不过是个羊圈；在这寒冷无际的草原和森林间，燃烧是无意义的，一腔热血喷出来，比一堆牛粪凉得更快，还不如后者有使用价值。但燃烧是他们的命运，他们是燃烧的一代。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.2 寂静的春天》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;程丽华的一席话拉近了叶文洁与她的距离，但叶文洁在灾难中学会了谨慎，她不敢贸然接受这份奢侈的善意。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.2 寂静的春天》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;（叶文洁的）父亲说：理论是应用的基础，发现自然规律，难道不是对时代最大的贡献？杨卫宁犹豫了一下，终于说出了真话：搞理论研究，容易在思想上犯错误。这话让父亲沉默了。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.3 红岸之一》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;常伟思露出了高深莫测的笑容：“你很快就会知道一切的，所有人都会知道。汪教授，你的人生中有重大的变故吗？这变故突然完全改变了你的生活，对你来说，世界在一夜之间变得完全不同。”&lt;/p&gt;

  &lt;p&gt;“没有。”&lt;/p&gt;

  &lt;p&gt;“那你的生活是一种偶然，世界有这么多变幻莫测的因素，你的人生却没什么变故。”&lt;/p&gt;

  &lt;p&gt;汪淼想了半天还是不明白。&lt;/p&gt;

  &lt;p&gt;“大部分人都是这样嘛。”&lt;/p&gt;

  &lt;p&gt;“那大部分人的人生都是偶然。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.4 科学边界》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;叶文洁：“她的世界太单纯，只有那些空灵的理论。那些东西一崩溃，就没有什么能支撑她活下去了。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.8 叶文洁》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;史强：“邪乎到家必有鬼。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.10 大史》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;汪淼：“世界上有许多一流学者被伪科学骗得团团转，最后还为之摇旗呐喊。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.10 大史》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;叶文洁：那些退休的老家伙们好多都是我在大学的同事，但总是同他们融不到一块儿。大家都喜欢念念叨叨地回忆往事，但都希望别人听自己的，而对别人说的都厌烦。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.11 三体、墨子、烈焰》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;红岸基地：在这种最高密级的项目里，一旦进入技术核心岗位，就很难调走。所以人们在工作中都故意将自己的能力降低很多，但还不能表现落后，于是领导指挥向东，他就卖力气地向西，故意装傻，指望领导产生这样的想法：这人也尽力了，但就这么点能力和水平，留他没什么用，反而碍手碍脚的。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.12 红岸之二》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;红岸计划批示：如果宇宙中真的还有其他的人和社会，那也很好嘛，旁观者清，千秋功罪，可真的有人评说了。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.13 红岸之三》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;这就是兰德思想库社会学学者比尔·马修在《十万光年铁幕：SETI社会学》一书中提出的“接触符号”理论。他认为，与外星文明的接触，只是一个符号或开关，不管其内容如何，将产生相同的效应。假如发生一个仅仅证明外星文明的存在而没有任何实质内容的接触——马修称其为元接触——其效应也能通过人类群体的心理和文化透镜被放大，对文明的进程产生巨大的实质性的影响。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.14 红岸之四》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;叶文洁：地球生命真的是宇宙中偶然里的偶然，宇宙是个空荡荡的大宫殿，人类是这宫殿中唯一的一只小蚂蚁。这想法让我的后半辈子有一种很矛盾的心态：有时觉得生命真珍贵，一切都重如泰山；有时又觉得人是那么渺小，什么都不值一提。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.14 红岸之四》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;三千万秦国军队宏伟的方阵铺展在大地上，这是一个边长六公里的正方形。在初升的太阳下，方阵凝固了似的纹丝不动，仿佛一张由三千万个兵马俑构成的巨毯，但飞翔的鸟群误入这巨毯上空时，立刻感到了下方浓重的杀气，鸟群顿时大乱，惊慌混乱地散开或绕行。汪淼在心里算了算，如果全人类站成这样一个方阵，面积也不过是上海浦东大小，比起它表现的力量，这方阵更显示了文明的脆弱。&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.17 三体、牛顿、冯·诺伊曼》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;独臂女人说：“最近有一部电影，叫《枫》，不知你看过没有？结尾处，一个大人和一个小孩儿站在死于武斗的红卫兵墓前，那孩子问大人：他们是烈士吗？大人说不是；孩子又问：他们是敌人吗？大人说也不是；孩子再问：那他们是什么？大人说：是历史。”&lt;/p&gt;

  &lt;p&gt;“听到了吗？是历史！是历史了！”粗壮女人兴奋地对叶文洁挥着一只大手说，“现在是新时期了，谁还会记得我们，拿咱们当回事儿？大家很快就会忘干净的！”&lt;/p&gt;

  &lt;p&gt;——刘慈欣《三体1.26 无人忏悔》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;审问者：看看地球三体组织现在的局面：降临派要借助外星力量毁灭人类，拯救派把外星文明当神来崇拜，幸存派的理想是以出卖同胞来苟且偷生，所有这些都与你借助外星文明改造人类的理想不一致。&lt;/p&gt;

  &lt;p&gt;叶文洁：我点燃了火，却控制不了它。&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.30 两个质子》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;丁仪：“我只想说明以下的事实：在宇宙间，一个技术文明等级的重要标志，是它能够控制和使用的微观维度。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.30 两个质子》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;审问者：那你为什么对其抱有那样的期望，认为它们能够改造和完善人类社会呢？&lt;/p&gt;

  &lt;p&gt;叶文治：如果他们能够跨越星际来到我们的世界，说明他们的科学已经发展到相当的高度，一个科学如此昌明的社会，必然拥有更高的文明和道德水准。&lt;/p&gt;

  &lt;p&gt;审问者：你认为这个结论，本身科学吗？&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.30 古筝行动》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;“当然没有错，生存是其他一切的前提，但，元首，请看看我们的生活：一切都是为了文明的生存。为了整个文明的生存，对个体的尊重几乎不存在，个人不能工作就得死；三体社会处于极端的专制之中，法律只有两档：有罪和无罪，有罪处死，无罪释放。我最无法忍受的是精神生活的单和枯竭，一切可能导致脆弱的精神都是邪恶的。我们没有文学没有艺术，没有对美的追求和享受，甚至连爱情也不能倾诉——元首，这样的生活有意义吗？”&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.32 监听员》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;“那花朵虽然娇弱但是绚丽无比，她在天堂闲适中感受着自由和美。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.32 监听员》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;“他们都有罪。”&lt;/p&gt;

  &lt;p&gt;“是。”&lt;/p&gt;

  &lt;p&gt;“六千人都脱水，在首都中心广场烧掉——你，就当引火物吧。”&lt;/p&gt;

  &lt;p&gt;“谢谢元首，这让我们的良心多少安定了一些。”&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.32 监听员》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;科学技术的全面发展取决于基础科学的发展，而基础科学的基础又在于对物质深层结构的探索，如果这个领域没有进展，科学技术整体上就不可能产生重大突破。&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.33 智子》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;就在常伟思说完这句话的三秒钟后，三体世界与地球叛军之外的人类进行了第一次交流，这以后，他们就中断了与地球三体叛军降临派的通讯，在所有与会者的有生之年，三体世界再也没有发来任何信息，这时，作战中心所有人的眼睛都看到了那个信息，就像汪淼看到倒计时一样，信息只闪现了不到两秒钟就消失了，但所有人都准确地读出了它的内容，它只有五个字——&lt;/p&gt;

  &lt;p&gt;你们是虫子！&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.33 智子》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr class=&quot;slender&quot; /&gt;

&lt;blockquote&gt;

  &lt;p&gt;把人类看做虫子的三体人似乎忘记了一个事实：虫子从来就没有被真正战胜过。&lt;/p&gt;

  &lt;p&gt;太阳被一小片黑云遮住了，在大地上投下一团移动的阴影。这不是普通的云，是刚刚到来的一大群蝗虫，它们很快开始在附近的田野上降落，三个人沐浴在生命的暴雨之中，感受着地球生命的尊严。丁仪和汪淼把手中拎着的两瓶酒徐徐洒到脚下的华北平原上，这是敬虫子的。&lt;/p&gt;

  &lt;p&gt;——刘慈欣 《三体1.34 虫子》&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 21 Jan 2022 00:00:00 -0600</pubDate>
        <link>https://mountaye.github.io/blog/articles/three-body-quotes</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/three-body-quotes</guid>
        
        
      </item>
    
      <item>
        <title>.git | 管理 GitHub 不同用户身份的仓库</title>
        <description>&lt;p&gt;很显然，我不可能把“阿掖山”这个名字写到论文里，与研究相关的项目、组里的代码和数据，都由另一个实名的 GitHub 账号来处理。这就有个问题——如何告诉 GitHub 某个项目文件夹该由哪个账号来做版本管理。&lt;/p&gt;

&lt;p&gt;于是 STFW，结果看到了GitHub  官方的回答：&lt;a href=&quot;https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/merging-multiple-user-accounts&quot;&gt;“这边建议您把两个账号合并呢～”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实这个问题在建立这个博客站之前就解决了，但是因为很长时间我的研究代码都是自己在用，而且只在台式机上用，一直没有推到 GitHub 上去，实名账号一直没在笔记本上用过。具体细节忘得差不多了，这次复习一下。&lt;/p&gt;

&lt;p&gt;作为例子，两个账号的用户名分别是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER1&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER2&lt;/code&gt;，注册邮箱分别是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER1@EMAIL.com&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER2@EMAIL.com&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;多个计算机用户&quot;&gt;多个计算机用户&lt;/h2&gt;

&lt;p&gt;当然了，最简单的方法就是新建一个操作系统用户，每个用户登录一个 GitHub 账号。这种方法好处很多：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不需要特殊操作。&lt;/li&gt;
  &lt;li&gt;适用于不同操作系统。&lt;/li&gt;
  &lt;li&gt;切换身份需要专门切换账号，有助于防止操作者忘记自己所处的身份。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是这篇文章不会涉及这种方法，因为当初买电脑的时候并没有注意到需要做身份隔离，等到发现事情不妙的时候已经混装和两个身份需要的不同软件，积重难返。于是采用了以下两节的解决方案。&lt;/p&gt;

&lt;h2 id=&quot;单个计算机用户windows-github-desktop&quot;&gt;单个计算机用户@Windows: GitHub Desktop&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-12-26-github-desktop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在官网下载、安装、打开 &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt; 客户端。&lt;/li&gt;
  &lt;li&gt;在 GitHub 网页版上切换到新的账户。&lt;/li&gt;
  &lt;li&gt;点击左上角 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File &amp;gt; Options&lt;/code&gt;，默认界面就是账户信息。点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign Out&lt;/code&gt; 退出登录，然后再点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign In&lt;/code&gt;，根据弹出窗口的提示操作，就来到了新的账户。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;单个计算机用户linux--sshconfig&quot;&gt;单个计算机用户@Linux : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh/config&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;具体操作看以下两个连接就够了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/JoaquimLey/e6049a12c8fd2923611802384cd2fb4a&quot;&gt;https://gist.github.com/JoaquimLey/e6049a12c8fd2923611802384cd2fb4a&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/authentication/connecting-to-github-with-ssh&quot;&gt;https://docs.github.com/en/authentication/connecting-to-github-with-ssh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;del&gt;但是为了水字数，&lt;/del&gt; 还是写得详细一点……&lt;/p&gt;

&lt;h3 id=&quot;本地生成并启用-ssh-key&quot;&gt;本地：生成并启用 SSH key&lt;/h3&gt;

&lt;p&gt;打开命令行，输入以下命令，生成 SSH key：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;USER1&quot;&lt;/span&gt; 
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;USER2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; 指定加密算法，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b&lt;/code&gt; 指定密钥的位数，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-C&lt;/code&gt; 相当于注释。&lt;/p&gt;

&lt;p&gt;然后命令行会弹出几个选项，可以一路按回车使用默认值。&lt;/p&gt;

&lt;p&gt;上述命令完成后，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh&lt;/code&gt; 文件夹应该会有两对四个密钥文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/USER1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/USER1.pub&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/USER2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/USER2.pub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后输入以下命令，启用刚刚生成的密钥。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 启动 ssh-agent&lt;/span&gt;
ssh-add ~/.ssh/USER1   &lt;span class=&quot;c&quot;&gt;# 添加 USER1 的密钥&lt;/span&gt;
ssh-add ~/.ssh/USER2   &lt;span class=&quot;c&quot;&gt;# 添加 USER2 的密钥&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;网页把密钥添加到对应的账号&quot;&gt;网页：把密钥添加到对应的账号&lt;/h3&gt;

&lt;p&gt;在网页端以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USER1&lt;/code&gt; 身份登录 GitHub 之后，在 “Settings” 页面找到 “SSH and GPG keys” 选项卡，点击绿色的 “New SSH key” 按钮之后，将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/USER1.pub&lt;/code&gt; 中的内容复制到 “Key” 填空区，然后起一个名字，点击 “Add SSH key” 按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-12-26-github-key.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;USER2也照此办理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;千万要注意&lt;/strong&gt;复制的应该是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pub&lt;/code&gt; 后缀的文件！&lt;/p&gt;

&lt;h3 id=&quot;本地编辑-sshconfig-文件&quot;&gt;本地：编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; 文件&lt;/h3&gt;

&lt;p&gt;在 ~/.ssh/ 找到或者新建一个名为 config 的文本文件。打开之后，将以下内容添加到文件中：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Host github.com-user1
	Hostname github.com
	User git
	IdentityFile ~/.ssh/user1
Host github.com-user2
	Hostname github.com
	User git
	IdentityFile ~/.ssh/user2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-clone-时-repo-地址的改动&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; 时 repo 地址的改动&lt;/h3&gt;

&lt;p&gt;一般的 git clone, 直接把 GitHub 提供的命令复制粘贴到命令行就行了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-12-26-git-clone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是我们这个不同，首先是只能选择 SSH 模式，然后是需要在域名&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com&lt;/code&gt; 后面加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-user1&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git clone git@github.com-user1:User/Repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里就体现出之前在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; 把 Host 命名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com-****&lt;/code&gt; 的好处了。&lt;/p&gt;

&lt;h3 id=&quot;git-commit-前填写在-repo-中填写账户信息&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 前填写在 repo 中填写账户信息&lt;/h3&gt;

&lt;p&gt;第一次做完改动推送到 GitHub 之前，需要专门在 repo 级别写明自己的身份，也就是在命令行输入：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git config &lt;span class=&quot;nt&quot;&gt;--local&lt;/span&gt; user.name  &lt;span class=&quot;s2&quot;&gt;&quot;USER1&quot;&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--local&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;USER1@EMAIL.com&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;注意为了防止操作者忘记自己所处的身份&quot;&gt;&lt;strong&gt;注意：&lt;/strong&gt;为了防止操作者忘记自己所处的身份&lt;/h3&gt;

&lt;p&gt;强烈建议去掉用户信息的全局设置：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; user.name
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unset&lt;/span&gt; user.email
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样假如忘记之前的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local&lt;/code&gt;, 第一次 git commit 的时候会报错，提示信息缺失。&lt;/p&gt;

&lt;p&gt;这样操作一次之后，之后的操作几乎感受不到账户的不同。&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Dec 2021 00:00:00 -0600</pubDate>
        <link>https://mountaye.github.io/blog/articles/git-multiple-users</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/git-multiple-users</guid>
        
        
      </item>
    
      <item>
        <title>.py | import 引用现成的代码</title>
        <description>&lt;p&gt;以官网给出的文件结构为例来说明：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用现成的-python-代码&quot;&gt;使用现成的 python 代码&lt;/h2&gt;

&lt;p&gt;正常的编程语言教程，教人配置完开发环境之后就应该进入正题，开始讲语法了。但是咱不正常，所以先来谈谈怎么用别人已经写好的代码。其中最简单的，就是可以直接通过包管理程序安装的：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;sound
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后想要使用某个文件中的函数，比如假装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wavwrite.py&lt;/code&gt; 中有个函数叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;，以下写法都是可以的，注意不同 import 方法对应不同的函数调用写法：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sound&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wavwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;formats&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;formats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wavwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sound.formats&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wavwrite&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wavwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sound.formats.wavwrite&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是，不是所有的 python 代码都可以直接安装，比如一篇论文的研究成果发表之后，处理数据的代码也往往开源，但是这些作者基本上就只是把自己写代码的文件夹公开出来而已，我们把文件夹下载下来，然后直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import sound&lt;/code&gt;, 会报错，提示找不到名为 sound 的库。&lt;/p&gt;

&lt;h2 id=&quot;python-如何读取代码文件&quot;&gt;python 如何读取代码文件&lt;/h2&gt;

&lt;p&gt;仔细想想，找不到才是正常的，之前轻轻松松的一句 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import sound&lt;/code&gt;就解决问题，这才不简单——不同的库往往位于文件系统的不同位置，但我们只要写出他们的名字就行了，不需要指定文件路径。电脑硬盘那么大，找到库却几乎是瞬间完成的。&lt;/p&gt;

&lt;p&gt;这是因为 python 并没有搜索整个硬盘。有一个变量，一般名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt;，其变量值是一个列表，表中成员是含有 python 库文件夹的路径。当我们在命令行输入命令的时候，电脑会：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;搜索当前所在的文件夹，也就是在命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; 时终端所在的文件夹。&lt;/li&gt;
  &lt;li&gt;遍历 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PYTHONPATH&lt;/code&gt; 中的文件夹。&lt;/li&gt;
  &lt;li&gt;python 包管理程序默认的位置，一般是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;path to python&amp;gt;/site-package&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看看有没有我们要引用的库，找到了就引入，找不到就报错。&lt;/p&gt;

&lt;p&gt;上一节的错误中，如果我们恰好位于 sound 所在的文件夹，然后运行 python，此时第一条生效， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import sound&lt;/code&gt; 不会报错，但在其他位置就不行了。&lt;/p&gt;

&lt;h2 id=&quot;名词解释interactive-script-module-package&quot;&gt;名词解释：interactive, script, module, package&lt;/h2&gt;

&lt;p&gt;可执行的 python 命令可以出现在以下四个地方，第一种是接受键盘输入的程序，后三种都是文件：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;interactive: python &lt;strong&gt;交互式界面&lt;/strong&gt;，也叫做 calculator mode，也就是在命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;之后出现的界面。每次输入一句，结果在命令行上显示出来。当 python 退出之后，输入过的命令就消失了。&lt;/li&gt;
  &lt;li&gt;script: python &lt;strong&gt;脚本&lt;/strong&gt;文件，也就是在命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python somefile.py&lt;/code&gt;里面的那个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;somefile.py&lt;/code&gt;。
    &lt;ol&gt;
      &lt;li&gt;毕竟 python 是一种很轻量化的语言，在一定程度上可以起到 shell 的作用，有些命令我们并不想要用完就扔，而是保存起来以便以后重复执行，另外很多命令的组合组合成函数也可以极大地简化工作。在这种语境之下, interactive 和 script 的关系，就好像 Linux 命令行和 bash script 的关系一样。&lt;/li&gt;
      &lt;li&gt;但同时 python 又是一种功能很全面的语言，完全可以胜任复杂的面向对象编程。在这种语境之下，script 也可以用来指代 main module，也就是程序执行的主文件和入口，和下面的一般的 module 相区分。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;module: python &lt;strong&gt;模块&lt;/strong&gt;文件，也就是在命令行输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m another&lt;/code&gt; 里面的那个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;another&lt;/code&gt;（注意这里不写拓展名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt;）。按照官方文档的说法，所有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 文件都是 module。但是实际上这句话很有误导性，上一节的 main module 和一般的 module 非常不同，下一节会详细展开讲。一般提到 module，都是在强调这个文件定义的变量和函数可以被其他的 python 文件引用。&lt;/li&gt;
  &lt;li&gt;package: python &lt;strong&gt;包&lt;/strong&gt;，互相关联的 modules 构成的更高一级的可供引用的结构，简单理解就是含有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; 的文件夹，但是 python 并不是根据文件夹和文件之间的从属关系来确定 package 和 module 之间的关系的，下一节会详细展开讲。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;script-vs-module&quot;&gt;script vs. module&lt;/h2&gt;

&lt;p&gt;python 同时兼具脚本语言的灵活性，和各种重型语言的功能全面性。因为前者，所以它并不要求程序作者一定要在一个叫做 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt; 的文件里写一个名叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main&lt;/code&gt; 的类, 然后在里面实现一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main()&lt;/code&gt; 方法。但是因为后者，没写不代表 python 不需要知道一个复杂程序执行的起点。&lt;/p&gt;

&lt;p&gt;这个起点就是不带有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m&lt;/code&gt; 参数的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; 命令后面跟着的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 文件，这就使得这个文件变得比其他 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 文件特殊。底层表现就是 python 会不管这个文件的名字叫什么，都将它的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt; 属性赋值为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;__main__&quot;&lt;/code&gt;。这样，即便这个文件可能是一个大型库中间的一个模块，运行的时候 python 连它的真名都不知道，就更找不到它同级和上下级的其他模块了。&lt;/p&gt;

&lt;p&gt;各种普通模块被 python 用到的方法就是通过在主模块 main module（或者说 script）中 import。经过“python 如何读取代码文件”一节中的搜索过程之后找到了所需模块或包，模块的名字、模块之间的关系、模块里定义了哪些属性和函数，就被 python 了解了，从而当主模块召唤他们的时候就知道去哪里找相应的代码。除了在被 import 的时候，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m&lt;/code&gt; 命令的宾语也可以告诉 python 被运行的模块和包的相对关系：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m sound.formats.wavwrite&lt;/code&gt; ，此时 python 执行了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wavwrite.py&lt;/code&gt; 中的所有可执行的命令，同时知道从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sound/&lt;/code&gt; 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wavwrite.py&lt;/code&gt; 的各个包之间的关系。&lt;/p&gt;

&lt;h2 id=&quot;absolute-import-vs-relative-import&quot;&gt;absolute import vs. relative import&lt;/h2&gt;

&lt;p&gt;开头使用已经安装过的包使用的语法全都是绝对引用 (absolute import)，表现就是 import 语句里面没有以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; 作为开头的。&lt;/p&gt;

&lt;p&gt;另外一种 import 方法叫相对引用 (relative import)，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; 表示模块所在的文件夹，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt; 表示模块的上一级文件夹。主要用在各种明确知道自己是工具代码，而且是一个更高层次结构的组成部分，几乎永远不需要被作为主模块运行的代码。&lt;/p&gt;

&lt;p&gt;回到开头例子里的文件结构，假如 sound/effects/surround.py 中想要使用 sound/formats/wavwrite.py 和 sound/effects/echo.py 中的函数，可以写成：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;# in sound/effects/surround.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;..formats&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wavwrite&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;如何组织代码以便自己重用&quot;&gt;如何组织代码，以便自己重用&lt;/h2&gt;

&lt;p&gt;研究终于推进到了准备写论文的阶段了（学渣本质暴露了），写草稿之余，之前几年时间里做过的处理和分析，接下来的一两个月里需要把工作流程规范化之后迅速重做一遍确认。&lt;/p&gt;

&lt;p&gt;随手写散落各处的分析代码需要整理到一起，之前试图统一到一个项目之下，结果总是在某个模块引用其他模块的时候遇到报错。于是才有了这篇文章。&lt;/p&gt;

&lt;p&gt;以下是 &lt;a href=&quot;https://gist.github.com/ericmjl/27e50331f24db3e8f957d1fe7bbbe510&quot;&gt;这篇文章&lt;/a&gt; 给出的一个推荐的项目文件结构：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
|- notebooks/
   |- 01-first-logical-notebook.ipynb
   |- 02-second-logical-notebook.ipynb
   |- prototype-notebook.ipynb
   |- archive/
	  |- no-longer-useful.ipynb
|- projectname/
   |- projectname/
	  |- __init__.py
	  |- config.py
	  |- data.py
	  |- utils.py
   |- setup.py
|- README.md
|- data/
   |- raw/
   |- processed/
   |- cleaned/
|- scripts/
   |- script1.py
   |- script2.py
   |- archive/
      |- no-longer-useful.py
|- environment.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;学过这篇笔记包含的内容，我才理解作者这样的安排。既然主文件 &lt;del&gt;很难&lt;/del&gt; 没办法通过相对引用来找到工具代码，索性就把工具代码写成一个完整可安装的库，然后就像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandas&lt;/code&gt; 一样在独立的 notebook 和 scripts 中引用。&lt;/p&gt;

&lt;p&gt;但是要让一个包可安装，需要创建并编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; 这个文件。这篇文章已经够长了，所以这个话题还是下次再说吧。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/7948494/whats-the-difference-between-a-python-module-and-a-python-package&quot;&gt;What’s the difference between a Python module and a Python package?&lt;/a&gt;. all python files re modules, while package is a specific kind of modules. It is a subsection of module in the python documentation.&lt;/li&gt;
  &lt;li&gt;Official explanation of python module: &lt;a href=&quot;https://docs.python.org/3/tutorial/modules.html&quot;&gt;https://docs.python.org/3/tutorial/modules.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time&quot;&gt;This stackoverflow  answer: “run as module” is different from “run as script”.&lt;/a&gt; run as module sets the “name” to the module’s name, while running as script sets it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__main__&lt;/code&gt; . Here we use “name” instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__name__&lt;/code&gt; because it also contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__path__&lt;/code&gt; in newer versions.&lt;/li&gt;
  &lt;li&gt;A tutorial for project organization: &lt;a href=&quot;https://realpython.com/python-application-layouts/&quot;&gt;https://realpython.com/python-application-layouts/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Official about packaging: &lt;a href=&quot;https://packaging.python.org/en/latest/tutorials/packaging-projects/&quot;&gt;https://packaging.python.org/en/latest/tutorials/packaging-projects/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gist: How to organize data science project: &lt;a href=&quot;https://gist.github.com/ericmjl/27e50331f24db3e8f957d1fe7bbbe510&quot;&gt;https://gist.github.com/ericmjl/27e50331f24db3e8f957d1fe7bbbe510&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;From the gist there is a link: &lt;a href=&quot;http://drivendata.github.io/cookiecutter-data-science&quot;&gt;http://drivendata.github.io/cookiecutter-data-science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 11 Dec 2021 00:00:00 -0600</pubDate>
        <link>https://mountaye.github.io/blog/articles/python-import-script-module-package</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/python-import-script-module-package</guid>
        
        
      </item>
    
      <item>
        <title>.md | 博客外观现代化升级</title>
        <description>&lt;p&gt;今年感恩节三天假期加上周末，一共五天的时间，别的啥也没干，憋在家里给博客换了个主题模板。现在新版本已经上线，基本上已经能用，明显的 bug 都已经解决了。主要的工作内容如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从 Tufte 风格转换到 material 风格&lt;/li&gt;
  &lt;li&gt;评论区迁移到现成的 &lt;del&gt;&lt;a href=&quot;https://utteranc.es/&quot;&gt;utterance&lt;/a&gt;&lt;/del&gt;  &lt;a href=&quot;https://giscus.app/&quot;&gt;giscus&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;将旧模版中的侧边栏注记功能移植到新的模板。&lt;/li&gt;
  &lt;li&gt;调整了 CSS，包括字体、代码模块、博客标题限制高度、博客博客实现类似纸张的卡片效果。&lt;/li&gt;
  &lt;li&gt;重写了 index.html, /History.html, /Links.html 等页面，尤其是 /Topics.html，实现了一个响应式的两列结构。&lt;/li&gt;
  &lt;li&gt;重写了博文前面的元信息。&lt;/li&gt;
  &lt;li&gt;将之前的 repo 重命名并且归档，新建一个同名的 repo，推送上线。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面挨个来说。&lt;/p&gt;

&lt;h2 id=&quot;风格转换&quot;&gt;风格转换&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-12-06-blog-old.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之前的风格名字叫做 Tufte，好像是根据一个美国教授的设计，主要设计元素包括一套自己加载的衬线字体（很漂亮，但是对中文没用），还有博文占据页面宽度的大约 60%，右侧剩下的空间可以做边注，有一个设计很精美的横向分割线 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;hr class=&quot;slender&quot;&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个模板很漂亮，但是衬线字体搭配背景色，就跟人一种上个世纪古董网站的感觉（没有对卢昌海老师不敬的意思）。&lt;/p&gt;

&lt;p&gt;Material Design 是 Google 推出的一个组件库，提供类似纸张和卡片的视觉效果，就给人一种很现代的感觉，内心觊觎已久。&lt;a href=&quot;https://github.com/naveenshaji/material&quot;&gt;GitHub 的这个 repository&lt;/a&gt; 就用了这套设计风格，虽然已经不再更新维护了，但是已有的功能，比如点击链接之后的加载页面，页面顶端的阅读进度条，我觉得让我自己来的话，十年之内都不一定能学到做出这些效果的技术，于是就直接拿来用了。&lt;/p&gt;

&lt;h2 id=&quot;评论区&quot;&gt;评论区&lt;/h2&gt;

&lt;h3 id=&quot;旧版jquery-搭配-github-milestones&quot;&gt;旧版：jQuery 搭配 GitHub Milestones&lt;/h3&gt;

&lt;p&gt;之前的评论区是根据 &lt;a href=&quot;https://farseerfc.me/zhs/pages/about.html&quot;&gt;farseerfc&lt;/a&gt; 大佬的&lt;a href=&quot;https://farseerfc.me/zhs/github-issues-as-comments.html&quot;&gt;博文&lt;/a&gt;自己仿写的 JavaScript 函数。原文是把 issue 作为一个博文的评论区，issue 下面的 comment 作为评论，这样每一条评论都是平级的，没办法实现对某一条评论的回复，只能在评论内容中指明回复的对象。&lt;/p&gt;

&lt;p&gt;除了像博文里一样自己手搓代码，也有现成的第三方工具 &lt;a href=&quot;https://utteranc.es&quot;&gt;utterance&lt;/a&gt; 来完成这一工作，但是我还是不喜欢这种单层评论系统，于是决定自己仿写一个类似的系统，但是让一个 milestone 对应一篇文章，一个 issue 对应一条评论，一个 comment 对应一条回复。&lt;/p&gt;

&lt;p&gt;这就需要我在博文的 Markdown 页面注明对应的 milestone 的编号，然后在网页加载完成之后向 GitHub 对应的 milestone 发送一个 GET 请求，询问是否存在 issues。 得到肯定的回答之后，再依次发送请求 GET 每一条 issue 的内容，显示在博文下方。代码位于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[/_includes/comments.html&lt;/code&gt; 页面](https://github.com/MountAye/blog-tufte/blob/source/_includes/comments.html)，当年从异步编程开始学起，颇费了我几个周末。&lt;/p&gt;

&lt;p&gt;问题出在 GitHub 的用户权限上，只有作者和管理员才有权给某条 issue 指定一个 milestone，所以读者建立 issue 进行评论之后并不会直接显示在博文下面，还需要我回到 repo 把那条 issue 手动挪到对应的文章，几乎不可用。&lt;/p&gt;

&lt;h3 id=&quot;新版giscus-搭配-github-discussions&quot;&gt;新版：giscus 搭配 GitHub Discussions&lt;/h3&gt;

&lt;p&gt;这次改版的时候觉得用户体验比“老子可以手搓评论区代码”的自我满足更重要，直接换用了 utterance。评论区在博客页面就提供了编辑区，新版本第一次上线不久就有朋友留言，说明这个评论区还是很好用的。&lt;/p&gt;

&lt;p&gt;后来GitHub推出了 Discussion 功能，每一条 discussion 下方可以有不同评论，评论下面可以有针对的回复，这就和一般的评论区和BBS 的“楼层-单元”同构了。&lt;/p&gt;

&lt;p&gt;然后又在阮一峰老师的博客看到了 &lt;a href=&quot;https://giscus.app/&quot;&gt;giscus，&lt;/a&gt;就是在 Discussions 架构下和 &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterance&lt;/a&gt; 类似的一个工具，只需要在官网按照流程配置，然后把生成的几行代码嵌入到自己的页面里就好了，比原来方便太多了：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://giscus.app/client.js&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-repo=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[ENTER REPO HERE]&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-repo-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[ENTER REPO ID HERE]&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-category=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[ENTER CATEGORY NAME HERE]&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-category-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[ENTER CATEGORY ID HERE]&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-mapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pathname&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-reactions-enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-emit-metadata=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-theme=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;light&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;crossorigin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之前 utterance 创建的评论也可以直接从 Issue 移动到 Discussion 板块，所以刚刚那条评论可以正常显示。但是因为换了新的 repo，旧版本的两条评论就移植不过来了，请萌狼和 HK 兄弟包涵。&lt;/p&gt;

&lt;h2 id=&quot;旧版特有功能侧边栏注记正文图片&quot;&gt;旧版特有功能：侧边栏注记、正文图片&lt;/h2&gt;

&lt;p&gt;早就想给博客改版了，一直拖着不办的原因主要是直接把博文复制粘贴到新模板的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/_posts&lt;/code&gt; 文件夹之后会报错，不知道排错需要多长时间，于是压根就不动手了。因为旧版通过 jekyll 实现了一些正常 markdown 文档没有的功能，我用到的主要就是侧边栏的边注 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sidenote&lt;/code&gt;，以及在正文内部插入图片的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maincolumn&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;jekyll 是建立在 ruby on rail 上的一个软件，所以这些功能也是用 ruby 语言写成的。本以为会很难，结果认真一看，其实根本没什么工作量，就直接把旧模板的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/_plugins&lt;/code&gt;文件夹复制到新模板就不再报错了，当然显示效果需要调整 CSS，下一节会讲到。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;label for=&apos;&apos; class=&apos;margin-toggle sidenote-number&apos;&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;input type=&apos;checkbox&apos; id=&apos;&apos; class=&apos;margin-toggle&apos;/&amp;gt;&amp;lt;span class=&apos;sidenote card&apos;&amp;gt; &amp;lt;/span&amp;gt;&lt;/code&gt; 就可以继续用了。&lt;/p&gt;

&lt;p&gt;至于正文图片，这个功能和 markdown 已有的图片功能重复了，我觉得不值得为了一点点显示效果牺牲可移植性，于是直接把相关组件删除了，然后把博客文章中用到的地方换成了 markdown 插入图片的语法，重复性体力劳动，不提了。&lt;/p&gt;

&lt;h2 id=&quot;调整-css&quot;&gt;调整 CSS&lt;/h2&gt;

&lt;h3 id=&quot;新建-paper-取代-cover&quot;&gt;新建 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.paper&lt;/code&gt; 取代 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cover&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-12-06-material-card-cover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个模板主打的一个内容卡片如图所示，很漂亮，但是整个元素的宽度是由封面图片 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cover&lt;/code&gt; 决定的：&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.scroll-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.scroll-1&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.card&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.cover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而我的很多博文都是纯文字的，直接不添加图片会有大半个卡片没什么内容，去掉图片区域之后整个卡片的宽度会缩水到文字的最大宽度，丑。解决方法是新建了一个新的类 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.paper&lt;/code&gt;，把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cover&lt;/code&gt; 中和宽度相关的设置移动到新的类，然后把新类应用在整个卡片的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; 上。&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.scroll-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.paper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1065px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/* .sidenote {width: 300px;} */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;考虑侧边栏的页面宽度响应式布局&quot;&gt;考虑侧边栏的页面宽度响应式布局&lt;/h3&gt;

&lt;p&gt;响应式布局指的是同一个网页，在不同的终端设备上都又能够有适合的视觉效果，主要方法就是根据不同的屏幕宽度设定某些元素的不同取值：&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1600px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;768px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;979px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;具体到这个博客：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;屏宽大于一个很大的值之后，博客正文和侧边栏的宽度固定，不再增加；&lt;/li&gt;
  &lt;li&gt;屏幕小于这个值，但是大于能够正常显示侧边栏的宽度时，博客正文和侧边栏都占据给定的百分比；&lt;/li&gt;
  &lt;li&gt;屏幕小于能够正常显示侧边栏的宽度时，侧边栏不再显示，正文宽度固定在之前最小的像素值；&lt;/li&gt;
  &lt;li&gt;正文像素数占据屏幕全部宽度之后，宽度设定为 100%。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;复习-liquid重写非博文页面&quot;&gt;复习 Liquid，重写非博文页面&lt;/h2&gt;

&lt;p&gt;非博文页面和之前的布局基本上相同，除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Topics&lt;/code&gt; 从一个无序号列表变成了响应式的两个竖栏。这是得益于模板引用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;materialize.css&lt;/code&gt;采用了 &lt;a href=&quot;https://materializecss.com/grid.html&quot;&gt;flexible grid&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;具体来说，一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;container&lt;/code&gt; 可以动态调整内部元素的占宽，以适应不同大小的设备，包含两级子元素，两级子元素顾名思义，分别显示为行和列的元素：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col s12 m6 l4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col s12 m6 l4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将父元素的宽度分成 12 个基本单位，方便指定某一个元素所占的宽度和高度。比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class = &quot;col s12 m6 l4&quot;&lt;/code&gt; 表示该元素在小设备 (small) 上占据 12/12=100% 屏宽，在中设备 (medium) 上占据 6/12 = 50% 屏宽，在大设备 (large) 上占据 4/12=1/3 屏宽。&lt;/p&gt;

&lt;h3 id=&quot;liquid&quot;&gt;Liquid&lt;/h3&gt;

&lt;p&gt;Jekyll 本身的编程语言是 Ruby，但是被 Jekyll 编译之前的网页文档中的特殊标记，是一种叫做 Liquid 的领域专用语言。&lt;/p&gt;

&lt;p&gt;一般的命令和控制流结构用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ % % }&lt;/code&gt; 括起来&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; for i in (1..len1) %}
	 assign idx = i | times: 2 | minus:2 %}
   assign cate = category[idx] %}
 endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接在网页中显示内容和变量使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ {  } }&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;post.title }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;函数调用的语法最奇葩，是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input | function&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input | function: parameter&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;assign category = site.data.category %}
assign length = category | size %}
assign   len1 = length | plus: 1 | divided_by: 2 %}
assign   len2 = length | divided_by: 2 %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;调整博文元信息&quot;&gt;调整博文元信息&lt;/h2&gt;

&lt;p&gt;每篇博文的开头两道分割线之间的 YAML 是绑定在页面上的变量，可以被 Liquid 引用 ``。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;.html | 翻译：为什么说物理不是一门学科&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;html&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;一篇稍微硬核的科普文章，讨论物理在生物学当中的可用性。&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;2019-06-19&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;milestoneID&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新版本简化了很多，删掉了没有用的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;date&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;categories&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;milestoneID&lt;/code&gt; 字段，同时把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keywords&lt;/code&gt; 变成了一个数组，也就是说同一篇文章可能出现在多个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Topics&lt;/code&gt; 页面的卡片中。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;.en | 翻译：为什么说物理不是一门学科&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;一篇稍微硬核的科普文章，讨论物理在生物学当中的可用性。&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;下一步计划&quot;&gt;下一步计划&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;进一步优化排版:
    &lt;ul&gt;
      &lt;li&gt;给博文的标题添加视觉效果，现在的一二级标题之间很难区分。&lt;/li&gt;
      &lt;li&gt;超链接的样式不够明显，一眼看不出哪里有链接。&lt;/li&gt;
      &lt;li&gt;侧边注距离正文的距离不合适，CSS 相关参数的效果很奇怪。&lt;/li&gt;
      &lt;li&gt;现在的 /Links 页面在宽度缩小之后用户头像会和介绍卡片挤到一起去。&lt;/li&gt;
      &lt;li&gt;网站整体字号在笔记本上比较合适，在台式机上看起来太大了，移动端更大。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;加入 google analytics&lt;/li&gt;
  &lt;li&gt;欢迎大家提建议。&lt;/li&gt;
  &lt;li&gt;欢迎有独立博客的朋友互相链接。&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;本期博文点赞过 5 亿，下篇文章写用 jekyll 在 GitHub Pages 上搭建静态博客的教程。&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 06 Dec 2021 00:00:00 -0600</pubDate>
        <link>https://mountaye.github.io/blog/articles/blog-update-theme-materalize</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/blog-update-theme-materalize</guid>
        
        
      </item>
    
      <item>
        <title>.en | 外交政策杂志《中国在衰落，而这才是问题》及一篇反驳</title>
        <description>&lt;p&gt;上周摸鱼的时候看到了&lt;a href=&quot;https://botanwang.com/articles/202111/%E3%80%96%E5%BE%AE%E5%8D%9A%E8%B0%88%E3%80%97%E7%A7%91%E6%8A%80%E4%B8%80%E5%B0%8F%E6%AD%A5%7C%E6%96%87%E6%98%8E%E4%B8%80%E5%A4%A7%E6%AD%A5.html&quot;&gt;反华媒体&lt;/a&gt;上转了一条微博，上面居然说“美国外交政策杂志：仅仅与中国竞争是不够的。中共的迅速军事扩张可能会在2035年入侵美国，所以解体中国是必需的。”&lt;/p&gt;

&lt;p&gt;这一听就觉得太扯淡了，应该是断章取义的结果。于是决定亲自去&lt;a href=&quot;https://foreignpolicy.com/&quot;&gt;《外交政策》&lt;/a&gt;杂志的官网上找找有没有可供断章取义的素材。结果找到了一篇&lt;a href=&quot;https://foreignpolicy.com/2021/09/24/china-great-power-united-states/&quot;&gt;《&lt;strong&gt;China Is a Declining Power—and That’s the Problem&lt;/strong&gt;》&lt;/a&gt;，但是有付费墙。在找全文的过程中，又找到了一篇反驳文章，于是一并翻译了出来。&lt;/p&gt;

&lt;p&gt;这篇文章，作者自认为是对修昔底德陷阱的纠正，我倒觉得可以看作是补充发展。我对修昔底德陷阱的了解，主要来自于一些公众号（比如FT中文网和很久以前已经被销号的“腾讯思享会”），以及 &lt;a href=&quot;https://space.bilibili.com/324879&quot;&gt;CRAZY262&lt;/a&gt; 的视频&lt;a href=&quot;https://www.bilibili.com/video/BV1tf4y1R7TK&quot;&gt;《&lt;strong&gt;【262思货】大国角斗 从修昔底德陷阱开始&lt;/strong&gt;》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-12-04-superpower.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;来源《&lt;strong&gt;【262思货】大国角斗 从修昔底德陷阱开始&lt;/strong&gt;》&lt;a href=&quot;https://www.bilibili.com/video/BV1tf4y1R7TK?share_source=copy_web&quot;&gt;https://www.bilibili.com/video/BV1tf4y1R7TK&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;修昔底德陷阱指的是先后崛起的两个强权之间，在后发国家即将或刚刚超越老牌帝国，两者国力靠近的时候，双方很容易爆发战争，若后发国家获胜，则霸权易手。但是这种解释存在不合理的地方：老牌帝国知道对方要超过自己，那么战争越早越好，最好是自己的势力还远胜于对方之时；后发国家认为“时间在我们这边”，那么战争越晚越好，直到自己远远甩开对方——两个不等式没有交集。传统的解释，往往无法离开偶然事件，政治家的错误判断，以及统治集团利益和国家利益之间的不协调。&lt;/p&gt;

&lt;p&gt;这篇文章则认为，战争发生不仅需要前文所说“后发国家即将或刚刚超越老牌帝国，两者国力靠近”（数学上的函数值），还需要满足”赶超国的国力发展速度（数学上的导数）明显下降，且老牌国家开始发力应对威胁”这一条件。这不仅导致两者国力相近的时间会被严重拉长，而且随者后发国家的速度下降程度和先进国的发力效果，会出现后发国家的优势反而会不断减少的时段。此时若后发国家判断已有的优势若不彻底利用则可能无法超越，则后发国会主动诉诸一战。&lt;/p&gt;

&lt;p&gt;反驳文章给出的理由很多，但思路很一致，并不反对这套解释，但是不认为中国的发展速度会下降到统治者认为必要一战的地步。具体的内容可以看译文。&lt;/p&gt;

&lt;p&gt;后来确认了一下，&lt;a href=&quot;https://twitter.com/chineseorusa321/status/1458857654529380358?s=20&quot;&gt;原微博&lt;/a&gt;所指实际是另一篇文章&lt;a href=&quot;https://foreignpolicy.com/2021/10/18/china-danger-military-missile-taiwan/&quot;&gt;《&lt;strong&gt;A Dangerous Decade of Chinese Power Is Here&lt;/strong&gt;》&lt;/a&gt;，略读一下，依然没有看到肢解之类的说法。&lt;/p&gt;

&lt;p&gt;好家伙，读后感放到了译文前面不说，篇幅也接近一篇独立文章了。以下是译文：&lt;/p&gt;

&lt;h2 id=&quot;外交政策杂志中国在衰落而这才是问题&quot;&gt;外交政策杂志《中国在衰落，而这才是问题》&lt;/h2&gt;

&lt;p&gt;Pay wall on original page, translation based on: &lt;a href=&quot;https://www.politics-dz.com/en/china-is-a-declining-power-and-thats-the-problem/&quot;&gt;https://www.politics-dz.com/en/china-is-a-declining-power-and-thats-the-problem/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Hal Brands&lt;/strong&gt; 是约翰霍普金斯大学高级国际研究学院亨利基辛格全球事务杰出教授。 他还是美国企业研究所的常驻学者和彭博观点专栏作家。&lt;br /&gt;
&lt;strong&gt;Michael Beckley&lt;/strong&gt; 是塔夫茨大学政治学副教授、美国企业研究所珍妮·柯克帕特里克访问学者，著有《无与伦比：为什么美国仍是世界唯一的超级大国》一书。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;为什么大国要打大仗？ 传统的答案是一个挑战者崛起和霸权衰落的故事。 一个对现有秩序规则感到不满的崛起的大国，在一个既定的大国——制定这些规则的国家——的基础上取得了发展。 紧张局势倍增； 实力考验接踵而至。 结果是恐惧和敌意的螺旋上升，几乎不可避免地导致冲突。 古代历史学家修昔底德写道：“雅典力量的增长，以及这在斯巴达引起的恐慌，使战争不可避免，”现在在解释美中竞争时，这句老生常谈，常到听吐了。&lt;/p&gt;

&lt;p&gt;由哈佛政治学家格雷厄姆·艾利森 (Graham Allison) 推广的修昔底德陷阱 (Thucydides Trap) 的想法认为，随着崛起的中国赶上萧条的美国，战争的危险将猛增。 就连中国国家主席习近平也赞同华盛顿必须为北京腾出空间的概念。 随着美国和中国之间的紧张局势升级，认为摩擦的根本原因是迫在眉睫的“权力转移”——一个霸权被另一个霸权取代——的信念已经成为经典。&lt;/p&gt;

&lt;p&gt;修昔底德陷阱并没有真正解释导致伯罗奔尼撒战争的原因。 它没有捕捉到经常推动后发大国——无论是 1914 年的德国还是 1941 年的日本——引发一些历史上最具破坏性的冲突的动力。 并且它没有解释为什么今天美中关系中发生战争的可能性非常大，因为它从根本上错误地判断了中国在发展轨迹所处的位置——相对实力达到顶峰并将很快开始消退。&lt;/p&gt;

&lt;p&gt;确实有一个致命的陷阱可以让美国和中国陷入困境。 但这不是修昔底德式的陈词滥调所说的权力转移的产物。 最好将其视为“峰值功率陷阱”。 如果历史有任何指导意义，那么中国——而不是美国——迫在眉睫的衰落可能会导致它突然爆发。&lt;/p&gt;

&lt;p&gt;有一整套被称为“权力转移理论”的文献认为，大国战争通常发生在一个霸权崛起和另一个霸权衰落的交叉点。 这是支撑修昔底德陷阱的理论主体，不可否认，这个想法有一定道理。 新势力的崛起总是会破坏稳定。 在公元前 5 世纪伯罗奔尼撒战争前夕，如果没有建立一个庞大的帝国并成为海军超级大国，雅典对斯巴达来说似乎不会如此具有威胁性。 如果中国仍然贫穷和弱小，华盛顿和北京就不会陷入竞争。 新兴大国确实以威胁统治大国的方式扩大其影响力。&lt;/p&gt;

&lt;p&gt;但引发战争的演算——尤其是推动后发大国，试图动摇现有体系地猪突猛进，的演算——更为复杂。 一个相对财富和权力正在增长的国家肯定会变得更加自信和雄心勃勃。 在一切平等的情况下，它将寻求更大的全球影响力和威望。 但如果它的地位稳步提升，它应该推迟与霸主的致命摊牌，直到它变得更加强大。 这样的国家应该遵循冷战后中国前领导人邓小平为崛起的中国定下的格言：韬光养晦，有所作为。&lt;/p&gt;

&lt;p&gt;现在想象一个不同的场景。 一个不满的国家一直在建立自己的权力并扩大其地缘政治视野。 但后来这个国家达到顶峰，也许是因为它的经济放缓，也许是因为它自己的自信激起了一个坚定的竞争对手的联盟，或者也许是因为这两件事同时发生。 未来开始寻找竞标； 迫在眉睫的危险感开始取代无限可能的感觉。 在这种情况下，后发大国可能会大胆甚至激进地采取行动，在为时已晚之前夺取其所能。 世界政治中最危险的轨迹是长期上升，然后是急剧下降的前景。&lt;/p&gt;

&lt;p&gt;正如我们在即将出版的《危险地带：与中国即将发生的冲突》一书中所展示的那样，这种情况比您想象的要普遍。 例如，历史学家唐纳德·卡根表明，在伯罗奔尼撒战争之前的几年里，雅典开始表现得更加好战，因为它担心海军力量平衡的不利变化——换句话说，因为它正处于在和斯巴达针锋相对的对峙中失去影响力的边缘。 我们在最近的案例中也看到了同样的事情。&lt;/p&gt;

&lt;p&gt;那些增长速度远远快于世界平均水平，然后遭受严重、长期放缓的大国通常不会悄然消失。 相反，他们变得傲慢和咄咄逼人。&lt;/p&gt;

&lt;p&gt;在过去的 150 年里，达到顶峰的大国——增长速度超过世界平均水平的大国，然后经历了严重、长期的放缓——通常不会悄悄消失。 相反，他们变得傲慢和咄咄逼人。 他们在国内压制异议，并试图通过在国外建立专属势力范围来重新获得经济动力。 他们向军队投入大量资金，并使用武力扩大影响。 这种行为通常会引发巨大的权力紧张局势。 在某些情况下，它涉及灾难性的战争。&lt;/p&gt;

&lt;p&gt;这应该不足为奇。 快速增长的时代增强了一个国家的雄心壮志，提高了人民的期望，并使竞争对手感到紧张。 在持续的经济繁荣时期，企业的利润不断增长，而公民也习惯了过大日子。 该国成为全球舞台上更大的参与者。 然后停滞来袭。&lt;/p&gt;

&lt;p&gt;增长放缓使领导者更难让公众满意。 经济表现不佳削弱了该国与竞争对手的对抗。 由于害怕动乱，领导人镇压异议人士。 他们拼命地纵横捭阖以阻止地缘政治敌人。 扩张似乎是一种解决方案——一种攫取经济资源和市场、让民族主义成为受伤政权的拐杖并击退外国威胁的方式。&lt;/p&gt;

&lt;p&gt;很多国家都走上了这条路，当美国内战后长期的经济高潮结束时，华盛顿猛烈镇压国内的罢工和动乱，建立了强大的蓝水海军，并在战争期间进行了一次交战和帝国扩张（译注：指美西战争）。 1890 年代。 20世纪之交，迅速崛起的俄罗斯帝国陷入严重衰退，沙皇政府在严打镇压的同时，还扩充军队，在东亚谋求殖民利益，并派遣约17万名士兵占领满洲。 这些举措适得其反：它们激怒了日本，日本在 20 世纪的第一次大国战争中击败了俄罗斯（译注：指日俄战争）。&lt;/p&gt;

&lt;p&gt;一个世纪后，俄罗斯在类似情况下变得咄咄逼人。 面对 2008 年后严重的经济放缓，俄罗斯总统弗拉基米尔·普京入侵了两个邻国，寻求建立一个新的欧亚经济集团，将莫斯科对资源丰富的北极的主张押注，并将俄罗斯引向更深入的独裁统治。 在 1970 年代战后经济扩张结束后，即使是民主的法国也急于扩张。 它试图重建其在非洲的旧势力范围，在其前殖民地部署了 14,000 名士兵，并在接下来的二十年中进行了十几次军事干预。&lt;/p&gt;

&lt;p&gt;所有这些案件都很复杂，但模式很明确。 如果快速崛起让各国有办法大胆行动，那么对衰落的恐惧就会成为更迅速、更紧迫的扩张的强大动力。 当快速崛起的大国导致敌对联盟对其进行遏制时，经常会发生同样的事情。 事实上，历史上一些最可怕的战争发生在后发大国认为他们通往荣耀的道路即将被阻挡的时候。&lt;/p&gt;

&lt;p&gt;德国在 19 世纪末和 20 世纪初与英国的竞争通常被认为是美中竞争的类比：在这两种情况下，一个专制的挑战者威胁到一个自由主义的霸权。 但更发人深省的相似之处在于：当一个被逼入绝境的德国意识到不打不行之时，战争就来了。&lt;/p&gt;

&lt;p&gt;1871年德国统一后飙升数十年。 它的工厂生产钢铁，抹去了英国的经济领先地位。 柏林建造了欧洲最优秀的军队和战列舰，威胁着英国的海上霸权。 到 1900 年代初，德国是欧洲的重量级人物，正在欧洲大陆寻求巨大的势力范围——德语中的“Mitteleuropa” 或中欧。 在当时的德皇威廉二世的领导下，它还在推行旨在保护殖民地和全球权力的“世界政策”。&lt;/p&gt;

&lt;p&gt;但在战争的前奏期间，德皇和他的助手们并不自信。 德国的鲁莽行为导致了敌对势力的包围。 伦敦、巴黎和俄罗斯圣彼得堡结成“三国协约”以阻止德国扩张。 到 1914 年，时间已经不多了。 德国正在经济上输给快速发展的俄罗斯； 伦敦和法国通过阻止其获得石油和铁矿石来寻求经济遏制。 柏林的主要盟友奥匈帝国正因种族紧张局势而四分五裂。 在国内，德国的专制政治体制陷入困境。&lt;/p&gt;

&lt;p&gt;最不祥的是，军事平衡正在发生变化。 法国正在扩充军队； 俄罗斯正在为其军队增加 470,000 人，并削减其为战争动员所需的时间。 英国宣布将为柏林建造的每一艘战列舰建造两艘。 目前，德国是欧洲最重要的军事强国。 但到了 1916 年和 1917 年，它将无可救药地被超越。 结果是一种现在或永不的心态：德国应该“在我们仍有获胜机会的情况下击败敌人”，参谋长赫尔穆特·冯·莫尔特克宣称，即使这意味着“在不久的将来挑起战争”。&lt;/p&gt;

&lt;p&gt;这就是 1914 年 6 月塞尔维亚民族主义者暗杀奥地利王储后发生的事情。 德皇政府敦促奥匈帝国粉碎塞尔维亚，尽管这意味着与俄罗斯和法国开战。 然后它入侵了中立的比利时——这是其施里芬计划进行两条战线战争的关键——尽管有可能激怒英国。 “这场战争将演变成一场世界大战，英国也将介入其中，”莫尔特克承认。 德国的崛起赋予了它为伟大而赌博的力量。 它迫在眉睫的衰落推动了使世界陷入战争的决定。&lt;/p&gt;

&lt;p&gt;日本帝国遵循了类似的轨迹。 1868 年明治维新后的半个世纪里，日本稳步崛起。 现代经济的建设和强大的军事力量让东京赢得了两次大战，并在中国、台湾和朝鲜半岛积累了殖民特权。 然而，日本并不是一个好战的掠夺者：在 1920 年代，它与美国、英国和其他国家合作，在亚太地区建立了一个合作安全框架。&lt;/p&gt;

&lt;p&gt;然而，在那十年间，事情分崩离析。 增长率从 1904 年至 1919 年间的年均 6.1% 下降到 1920 年代的年均 1.8%； 大萧条随后关闭了日本的海外市场。 失业率飙升，破产的农民卖掉了他们的女儿。 与此同时，在中国，日本的影响力正受到苏联和当时中国领导人蒋介石领导下兴起的民族主义运动的挑战。 东京的答案是国内法西斯主义和国外侵略。&lt;/p&gt;

&lt;p&gt;从 1920 年代后期开始，军方发动了一场慢动作政变，并利用国家资源进行“全面战争”。 日本发动大规模军事集结，以暴力方式建立了广阔的势力范围，1931年占领满洲，1937年入侵中国，并计划征服亚太地区资源丰富的殖民地和战略岛屿。 目标是建立一个自给自足的帝国； 结果在东京的脖子上画了一个战略套索。&lt;/p&gt;

&lt;p&gt;日本进军中国最终导致了与苏联的惩罚性战争。 日本在东南亚的设计让英国感到震惊。 它对地区主导地位的推动也使其成为美国的敌人——东京几乎所有石油都从美国进口，其经济规模远大于日本。 东京对抗压倒性的敌人联盟。 然后它冒着一切风险，而不是接受屈辱和衰落。&lt;/p&gt;

&lt;p&gt;再一次，促发原因是一个关闭的机会之窗。 到 1941 年，美国正在建设一支无与伦比的军队。 7 月，当时的美国 富兰克林·罗斯福总统实施了石油禁运，威胁要阻止日本的扩张。 但由于早期重整军备，日本在太平洋仍然拥有暂时的军事优势。 因此，它在闪电袭击中利用了这一优势——夺取了荷属东印度群岛、菲律宾以及从新加坡到威克岛的其他领土，并轰炸了美国珍珠港的舰队——这保证了它自己的毁灭。&lt;/p&gt;

&lt;p&gt;日本的胜利前景暗淡，当时的日本将军东条英机承认，但别无选择，只能“闭上眼睛信仰一跃”。 后发的日本看到时间不多了，变得非常暴力。&lt;/p&gt;

&lt;p&gt;这才是当今美国应该为中国担心的真正陷阱——一个有抱负的超级大国登峰造极，然后拒绝承担下降的痛苦后果的陷阱。&lt;/p&gt;

&lt;p&gt;中国的崛起并非海市蜃楼：数十年的增长赋予北京全球力量的经济力量。 对关键技术和通信基础设施的重大投资在争夺地缘经济影响力的斗争中取得了强势地位； 中国正在利用跨大洲的“一带一路”倡议将其他国家带入其轨道。 最令人担忧的是，智库评估和美国 国防部的报告显示，中国日益强大的军队现在确实有机会在西太平洋与美国开战。&lt;/p&gt;

&lt;p&gt;因此，中国也发展出超级大国的野心也就不足为奇了：习近平或多或少地宣布，北京希望对台湾、南海和其他有争议的地区主张主权，成为亚洲的强国并挑战美国的全球领导地位。 然而，如果中国的地缘政治机会之窗是真实存在的，那么它的未来已经开始变得相当严峻，因为它正在迅速失去推动其快速增长的优势。&lt;/p&gt;

&lt;p&gt;从 1970 年代到 2000 年代，中国在食物、水和能源资源方面几乎自给自足。 它享受了历史上最大的人口红利，每 65 岁或 65 岁以上的老年人就有 10 个处于工作年龄的成年人。 （对于大多数主要经济体而言，每个老年人平均有接近 5 个适龄成年人。）中国拥有安全的地缘政治环境，可以轻松进入外国市场和技术，这一切都得益于与美国的友好关系。 中国政府巧妙地利用了这些优势，进行了经济改革和开放，同时将政权从中国前领导人毛泽东领导下的扼杀极权主义转变为继任者领导下的更聪明——虽说仍然是深度镇压——的威权主义形式。 从 1970 年代到 2010 年代初，中国拥有一切——只是繁荣所需的禀赋、环境、人员和政策的组合。&lt;/p&gt;

&lt;p&gt;然而，自 2000 年代后期以来，中国崛起的驱动力要么停滞不前，要么完全扭转。 例如，中国正在耗尽资源：水变得稀缺，该国正在进口比任何其他国家都多的能源和食品，破坏了自己的自然资源。 因此，经济增长的成本越来越高：根据星展银行的数据，今天产生一个单位增长所需的投入是 2000 年代初的三倍。&lt;/p&gt;

&lt;p&gt;中国也正在接近人口悬崖：从 2020 年到 2050 年，中国将失去惊人的 2 亿劳动适龄成年人——人口数量相当于尼日利亚——并增加 2 亿老年人。 财政和经济后果将是毁灭性的：目前的预测表明，到 2050 年，中国的医疗和社会保障支出占 GDP 的比重必须增加两倍，从 10% 增加到 30%，以防止数百万老年人因贫困和忽视而死亡。&lt;/p&gt;

&lt;p&gt;更糟糕的是，中国正在放弃促进快速增长的一揽子政策。 在习近平的领导下，北京已经滑回到极权主义。 习近平自任“一切主席”，破除集体统治的任何表象，把坚持“习近平思想”作为日益僵化政权的意识形态核心。 他以牺牲经济繁荣为代价，不懈地追求权力的集中。&lt;/p&gt;

&lt;p&gt;国有僵尸企业得到支持，而私营企业却缺乏资金。 客观的经济分析正在被政府宣传所取代。 在意识形态一致的闷闷不乐的气氛中，创新变得越来越困难。 与此同时，习近平残酷的反腐运动阻碍了创业，一波政治驱动的监管浪潮从中国领先科技公司的市值中抹去了超过 1 万亿美元。 习近平并没有简单地停止推动中国发展的经济自由化进程：他已经将其严重逆转。&lt;/p&gt;

&lt;p&gt;这些趋势造成的经济损害开始累积——随着快速增长的经济逐渐成熟，无论如何都会出现放缓。十多年来，中国经济一直在失去动力：该国的官方增长率从 2007 年的 14% 下降到 2019 年的 6%，严格的研究表明，现在的真实增长率接近 2%。更糟糕的是，大部分增长来自政府刺激支出。根据世界大型企业联合会的数据，2008 年至 2019 年间，全要素生产率平均每年下降 1.3%，这意味着中国每年都在增加支出以减少生产。这反过来又导致了巨额债务：中国的债务总额在 2008 年至 2019 年期间飙升了八倍，超过了 COVID-19 之前 GDP 的 300%。任何以接近中国目前的速度积累债务或失去生产力的国家随后都至少遭受了近乎零经济增长的“失去的十年”。&lt;/p&gt;

&lt;p&gt;此外，所有这一切都在发生，因为中国面临着日益敌对的外部环境。 COVID-19、持续侵犯人权和侵略性政策的结合导致对中国的负面看法达到自 1989 年天安门广场大屠杀以来的最低水平。自那以后，担心中国竞争的国家对其商品设置了数千个新的贸易壁垒。 2008 年，十多个国家退出了习近平的“一带一路”倡议，而美国则在全球范围内针对中国主要科技公司——尤其是华为——发起了一场全球运动，而横跨多个大陆的富裕民主国家对北京的数字影响力设置了障碍。 世界越来越不利于中国的轻松增长，习近平政权越来越面临曾经让德国和日本领导人绝望的那种战略包围。&lt;/p&gt;

&lt;p&gt;典型的例子是美国 政策。 在过去五年中，两个美国 总统政府已承诺美国对中国采取“竞争”政策——实际上是新遏制政策。防御战略现在的重点是击败中国在西太平洋的侵略； 华盛顿正在使用一系列贸易和技术制裁来检查北京的影响力并限制其经济主导地位的前景。 一名解放军高级军官警告说：“一旦美国帝国将你视为他们的‘敌人’，你就有大麻烦了。” 事实上，美国还致力于在全球范围内策划对中国力量的更大抵抗，随着越来越多的国家对北京的威胁做出反应，这项运动开始显现成效。&lt;/p&gt;

&lt;p&gt;在亚洲海上，对中国力量的抵抗正在加强。 台湾正在增加军费开支，并计划将自己变成西太平洋的战略豪猪。 日本正在进行冷战结束以来最大规模的军事集结，并同意如果中国攻击台湾，将支持美国。 南海周边国家，特别是越南和印度尼西亚，正在加强其空中、海军和海岸警卫队力量，以对抗中国的扩张主张。&lt;/p&gt;

&lt;p&gt;其他国家也在反击北京的自信。 澳大利亚正在扩大北部基地以容纳美国 舰船和飞机，以及建造远程常规导弹和核动力攻击潜艇。 印度正在与中国接壤的边境集结军队，同时派遣军舰通过南海。 欧盟将北京列为“系统性竞争对手”，欧洲三大强国——法国、德国和英国——已向南海和印度洋派遣了海军特遣部队。 各种多边反华倡议——四边安全对话； 供应链联盟； 与华盛顿、伦敦和堪培拉的所谓 AUKUS 新联盟； 其他的方面也正在推进。 美国的“多边俱乐部战略”，鹰派和人脉广泛的学者严学通在7月承认，正在“孤立中国”并损害其发展。&lt;/p&gt;

&lt;p&gt;毫无疑问，反华合作仍然不完善。 但总体趋势是明确的：一系列行动者正在逐渐联手制衡北京的力量并将其置于战略盒中。 换句话说，中国不是一个永远上升的国家。 它是一个已经强大、雄心勃勃、深陷困境的大国，其机会之窗不会长期敞开。&lt;/p&gt;

&lt;p&gt;在某些方面，所有这些对华盛顿来说都是好消息：一个经济放缓并面临越来越大的全球阻力的中国将发现很难取代美国成为世界领先大国——只要美国不撕裂自己分开或以其他方式放弃游戏。 然而，在其他方面，这个消息更令人不安。 历史警告世界应该期待未来十年达到顶峰的中国采取更大胆、甚至更不稳定的行动——在其命运消退之前争取长期寻求的战略价格。&lt;/p&gt;

&lt;p&gt;这可能是什么样子？ 我们可以根据中国目前的做法做出有根据的猜测。&lt;/p&gt;

&lt;p&gt;北京已经在加倍努力，通过主导人工智能、量子计算和 5G 电信等关键技术，并利用由此产生的影响力使国家屈服于自己的意愿，从而建立 21 世纪的经济影响范围。 它还将竞相完善“数字威权主义”，既可以在国内保护不稳定的中国共产党统治，同时通过向世界各地的专制盟友出口这种模式来巩固北京的外交地位。&lt;/p&gt;

&lt;p&gt;最令人不安的是，未来十年，中国将非常想用武力按照自己的条件解决台湾问题。&lt;/p&gt;

&lt;p&gt;在军事方面，中国共产党很可能在确保中亚和西南亚、非洲和其他地区的长而脆弱的供应线和保护基础设施项目方面变得越来越强硬，解放军中的一些鹰派人士已经渴望扮演这个角色。假设。 面对日本、菲律宾和其他阻碍其对南中国海和东海的主张的国家，北京也可能变得更加自信。&lt;/p&gt;

&lt;p&gt;最令人不安的是，未来十年，在华盛顿和台北完成军队重组以提供更强大防御之前，中国将非常想使用武力按照其条款解决台湾问题。 解放军已经在台湾海峡加紧军演力度。 习近平一再宣布北京不能永远等待其“叛逆省份”回归。 当军事平衡在 2020 年代后期暂时进一步向中国倾斜时，随着五角大楼被迫退役老化的船只和飞机，中国可能再也没有比这更好的机会夺取台湾并让华盛顿蒙受耻辱的失败了。&lt;/p&gt;

&lt;p&gt;需要明确的是，中国可能不会像日本在 1930 年代和 1940 年代初那样在整个亚洲进行全面的军事狂暴。 但当它试图锁定关键收益时，它将冒更大的风险并承受更大的紧张局势。 欢迎来到中国达到顶峰时代的地缘政治：一个已经有能力猛烈挑战现有秩序的国家，一个可能会跑得更快、更努力的国家，因为它失去了对时间站在一边的信心。&lt;/p&gt;

&lt;p&gt;那么，美国在2020年代与中国打交道将面临的不是一项而是两项任务。 它必须继续为长期竞争动员起来，同时还要迅速采取行动以阻止侵略并削弱北京可能采取的一些更具侵略性的近期举措。 换句话说，系好安全带，美国一直在鼓动自己应对崛起的中国。 即将发现，衰落的中国可能更加危险。&lt;/p&gt;

&lt;h2 id=&quot;反驳&quot;&gt;反驳&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wgi.world/china-is-a-declining-power-and-that-s-the-problem-a-rebuttal/&quot;&gt;https://wgi.world/china-is-a-declining-power-and-that-s-the-problem-a-rebuttal/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;作者：Andrew K.P. 梁（国际独立中国策略师。Andrew 梁国际顾问与投资有限公司董事长兼首席执行官）&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;虽然流行的“中国威胁”论调是中国作为全球大国的迅速崛起，但美国企业研究所的两位杰出学者哈尔布兰兹和迈克尔贝克利于 2021 年 9 月 24 日在外交政策中发表的一篇挑衅性文章认为，中国可能很快就会达到它的巅峰潜力，就像德意志帝国和日本一样，可能会变得咄咄逼人，以在为时已晚之前抓住其逐渐减少的主导地位的机会。&lt;/p&gt;

&lt;p&gt;他们关于中国即将“衰落”的论点是众所周知的：“中国即将未富先老”，人口结构不断恶化，水和粮食不安全，生产力下降，债务增加，种族动荡，全球形象骤降，以及美国全方位的反击，包括脱钩。&lt;/p&gt;

&lt;p&gt;但是，该论点存在一定程度的否定主义或盲点：&lt;/p&gt;

&lt;p&gt;(a) 由于中国人口是美国的四倍，只要达到美国人均生产力的四分之一就可以取代美国成为世界最大经济体。总部位于英国的经济与商业研究中心 (CEBR) 表示，随着经济从大流行中恢复得更早，中国最早可能在 2028 年成为最大的经济体。为什么中国现在或成为世界最大经济体后，要变得更加激进？&lt;/p&gt;

&lt;p&gt;(b) 上述所有障碍都是真实存在的，但并非不可逾越。一系列新举措已经出台，包括“共同富裕”、到 2035 年将 8 亿消费者中产阶级翻一番、降低退休年龄、数字化、机器人技术、创新以及连接所有城镇的全国现代铁路系统，然而偏远地区，20 万人及以上。这包括在未来 15 年内将世界上最广泛的高速铁路系统翻一番，达到 70,000 公里，以连接所有人口超过 50 万的城市。中国承诺到2030年达到碳排放峰值，到2060年实现碳中和。它还要求党委书记负责生态。&lt;/p&gt;

&lt;p&gt;(c) 到2049年中华人民共和国成立100周年，实现“富强、民主、文明、和谐的社会主义现代化国家”的中国梦明显有活力。它不包括世界霸权。为什么中国要在实现中国梦之前或之后变得更加激进？&lt;/p&gt;

&lt;p&gt;(d) 两位作者认为，中国可能发动侵略的可能导火索是台湾。该岛与中国大陆的供应链和价值链紧密相连。大约有100万台湾人在大陆生活和工作。许多台湾人在维护各自独立身份的同时，对摇摆不定，更别提沉船了。除非台湾正式宣布独立，否则时间在北京一边。北京为什么要同时发动一场后果不明的战争，从而危及实现中国梦的机会？&lt;/p&gt;

&lt;p&gt;关于与中国脱钩的影响，凯投宏观于 2021 年 9 月 17 日由著名经济学家朱利安·埃文斯-普里查德 (Julian Evans-Pritchard) 和马克·威廉姆斯 (Mark Williams) 撰写的报告表明，如果世界逐渐分为“美国集团”和“中国集团”，供应链重新安排而不是完全切断，中国的处境将比美国糟糕得多。报告显示，在包括台湾在内的217个全球经济体中，美国共有114个经济体，而中国只有90个。&lt;/p&gt;

&lt;p&gt;这在某种程度上与许多方面的调查结果相矛盾，即与美国相比，更多的国家将中国作为最大的贸易伙伴。&lt;/p&gt;

&lt;p&gt;正如印度《经济时报》2021 年 9 月 3 日报道的那样，“根据洛伊研究所的数据，在 2000 年之前，美国主导着全球贸易，80% 以上的国家与美国的贸易量超过与中国的贸易量。然而，到 2018 年，这一数字急剧下降至仅 30%，因为中国已成为 190 个国家中 128 个国家的最大贸易伙伴。”&lt;/p&gt;

&lt;p&gt;根据商务部主办的中国国际进口博览会局2021年3月24日发布的数据，中国已成为美国、欧盟、日本、美国等120多个国家和地区的第一大贸易伙伴。尽管采取了强有力的脱钩措施。
此外，关于世界贸易体系可以被人为地分为两个独立集团的论点充其量是可疑的。它忽略了全球供应链和价值链的巨大复杂性，而中国已成为其中的中心枢纽。这就是为什么世界十大集装箱港口中有七个在中国，包括香港。&lt;a href=&quot;https://www.bansard.com/en/news/global-top-20-container-ports-2020&quot;&gt;点击这里。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;根据乔治城大学杰出学者亨利·法雷尔和亚伯拉罕·纽曼 2020 年 6 月 3 日在《外交事务》上的一篇文章，与中国脱钩的愚蠢行为：这不仅是危险的，而且是不可能的&lt;/p&gt;

&lt;p&gt;如果有的话，作为最近启动的区域和全面经济伙伴关系的中心枢纽，中国可能会更加锁定全球和区域供应和价值链。RCEP 是世界上最大的贸易集团，由所有东盟成员国及其主要贸易伙伴组成，占世界人口和 GDP 的三分之一。&lt;/p&gt;

&lt;p&gt;因此，脱钩的“分叉集团”理论似乎充其量只是理论上的，如果不是完全不切实际的话。&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Dec 2021 00:00:00 -0600</pubDate>
        <link>https://mountaye.github.io/blog/articles/en-foreign-policy-china-declining</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/en-foreign-policy-china-declining</guid>
        
        
      </item>
    
      <item>
        <title>.py | Fedora 上安装 CPU 版 pytorch</title>
        <description>&lt;p&gt;马上要参加一个暑期学校，关于深度学习在显微图像处理当中的应用。&lt;/p&gt;

&lt;p&gt;深度学习是机器学习的一个分支，机器学习中的绝大多数数据都可以抽象为向量（一阶张量），绝大多数的算法都可以分解为向量之间的运算，或者对向量的变换，表示为矩阵（二阶张量）。这就对张量计算相关算法的库函数产生了很大的需求。PyTorch 和 TensorFlow，还有其他的一些库，比如 Keras，Caffe 等等等等，都是为此而生。早期版本的 pytorch 和 tensorflow 有很大的区别，但是随着版本的迭代，两者逐渐兼并和挤掉了其他的竞争者，两者的相似之处也越来越多，“变成了自己曾经最讨厌的样子”。lol&lt;/p&gt;

&lt;p&gt;不知道课上究竟要使用哪种机器学习的框架，所以决定把 PyTorch 和 TensorFlow 全都安装了（摊手）。正好可以接着上一篇的 &lt;a href=&quot;/blog/articles/python-interpreter-editor-virtualenv&quot;&gt;python 教程&lt;/a&gt; 往下写。&lt;/p&gt;

&lt;p&gt;先说一下自己的软硬件环境：Intel 家的 CPU 和集成显卡（玩不了《文明6》）。虽然不在官方支持 Linux 的名单上，但是自己安装了 Fedora，内核更新了几次之后已经没有了兼容性问题。python 版本 3.9.6，包管理器是 pip，编辑器是 vscode。&lt;/p&gt;

&lt;h2 id=&quot;建立虚拟环境&quot;&gt;建立虚拟环境&lt;/h2&gt;

&lt;p&gt;为什么要建立虚拟环境的问题本系列的前一篇已经回答过了，这次直接开干。我给两个虚拟环境分别取名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch&lt;/code&gt; 和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tf&lt;/code&gt; 。关于命令行部分的代码，为了表示各个虚拟环境，特别加上了命令提示符&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(env)[me@mycomputer]$&lt;/code&gt;，抄代码的时候注意去掉。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkvirtualenv torch
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;torch&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;在 PyTorch 官网，找到自己的硬件配制对应的安装命令：&lt;a href=&quot;https://pytorch.org/get-started/locally/&quot;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;。比如我的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stable&lt;/code&gt;&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linux&lt;/code&gt;&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pip&lt;/code&gt;&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CPU&lt;/code&gt;。把生成的命令复制到命令行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;torch&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.9.1+cpu &lt;span class=&quot;nv&quot;&gt;torchvision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;0.10.1+cpu &lt;span class=&quot;nv&quot;&gt;torchaudio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;0.9.1 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://download.pytorch.org/whl/torch_stable.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等待各种提示信息显示安装完成。&lt;/p&gt;

&lt;h2 id=&quot;验证和退出&quot;&gt;验证和退出&lt;/h2&gt;

&lt;p&gt;按照 &lt;a href=&quot;https://pytorch.org/get-started/locally/#linux-verification&quot;&gt;官网给出的方法&lt;/a&gt;，验证安装是否成功：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# tensor([[0.3799, 0.4494, 0.4296],
#       [0.5800, 0.0180, 0.3110],
#       [0.9847, 0.0125, 0.2648],
#       [0.0296, 0.3142, 0.9266],
#       [0.3192, 0.9645, 0.5545]])
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了下一步安装 tensorflow，先要退出到默认的虚拟环境：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;torch&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;说好的-tensorflow-呢&quot;&gt;说好的 TensorFlow 呢&lt;/h2&gt;

&lt;p&gt;本来这篇文章是打算把  pytorch 和 tensorflow 一起写了，结果 tensorflow 实在是不给力。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直接安装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 &lt;a href=&quot;https://www.tensorflow.org/install&quot;&gt;TensorFlow 的官网&lt;/a&gt;上方导航栏找到 install 按钮，然后在页面左侧找到 package/pip，&lt;a href=&quot;https://www.tensorflow.org/install/pip#3.-install-the-tensorflow-pip-package&quot;&gt;安装命令&lt;/a&gt;也是只有一句话&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tensorflow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然而不行，虽然安装过程中没有报错，但是验证安装的时候报出一堆错误。&lt;/p&gt;

&lt;p&gt;报错信息里有一句 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Could not load dynamic library &apos;libcudart.so.11.0&apos;&lt;/code&gt;，怀疑上面命令安装的是 GPU 版本。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装 CPU 版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在网页正文的“Package Location”一节找到了 CPU 版本的安装文件：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow_cpu-2.6.0-cp39-cp39-manylinux2010_x86_64.whl&lt;/code&gt;，于是删除虚拟环境、重建虚拟环境、重新安装。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tf&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rmvirtualenv tf
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkvirtualenv tf
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tf&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; pip
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tf&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;me@mycomputer]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow_cpu-2.6.0-cp39-cp39-manylinux2010_x86_64.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行官方提供的测试之后依然会有警告信息：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tf&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;shixing@yoga-laptop ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;import tensorflow as tf;print(tf.reduce_sum(tf.random.normal([1000, 1000])))&quot;&lt;/span&gt;
20XX-XX-XX XX:XX:XX.XXXXXX: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;oneDNN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; to use the following CPU instructions &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;performance-critical operations:  AVX2 AVX512F FMA
To &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;them &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;other operations, rebuild TensorFlow with the appropriate compiler flags.
tf.Tensor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-1338&lt;/span&gt;.4773, &lt;span class=&quot;nv&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=()&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;float32&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u&quot;&gt;stackoverflow 的这个回答&lt;/a&gt; 说，需要从源码编译 tensorflow，具体的方法在&lt;a href=&quot;https://www.tensorflow.org/install/source#linux&quot;&gt;官网也有&lt;/a&gt;，但是实在是太麻烦了，&lt;del&gt;（还是鸽了）&lt;/del&gt; 下次单独写成一篇吧。&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Oct 2021 00:00:00 -0500</pubDate>
        <link>https://mountaye.github.io/blog/articles/install-pytorch-cpu-on-fedora</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/install-pytorch-cpu-on-fedora</guid>
        
        
      </item>
    
      <item>
        <title>.doc | 泰勒的追思会</title>
        <description>&lt;p&gt;距离开学还有两周的星期日深夜，临睡之前瞥了一眼手机的邮箱，看到一封来自系主任的邮件。标题只有两个词 “sad news”，下面的一行摘要里有维教授的名字，心下一惊。点开邮件全文，教授的儿子泰勒因为抑郁去世。&lt;/p&gt;

&lt;p&gt;维教授是我们系生物方向的四人组之一，主攻神经科学。我们入学那年，他的课题组正从实验向理论方向转型，需要新人手。当时我已经有中意的课题组了，但是抱着多听听也没坏处的想法，也参加维教授的组会，一起听的还有陈豪和一个伊朗女生，以及本科生松岩。感恩节的时候，维教授邀请生物方向的所有老师同学和家人到他家聚会，席间老师的孩子们在一起玩，泰勒就在其中吗？&lt;/p&gt;

&lt;p&gt;转过天来，系主任又转发了来自维教授的消息，通知大家泰勒的追思会在周四下午举行。转发的时候，系主任还请大家到系办公室，留言向维教授一家致哀。地点细节若干，唯一印象深刻的是对追思会的用词—— “celebration of his life”。&lt;/p&gt;

&lt;p&gt;当时已经决定要参加活动，但是放眼衣柜，没有合适的衣服。于是周一下午去村中心的商场购物。上衣很快选定了一件纯黑色长袖衬衫，因为很少逛商场于是顺便买了一件深蓝色同款。裤子在同一个店试了几条，总觉得不如衬衫的颜色正。于是去了隔壁的一家西装店买了一条西裤，各方面都好，除了价格。还想买一件白衬衫，试了几次尺寸，发现店家已经准备关门了，出门见天光依然大亮，才知道疫情给生活带来的变化远不止于口罩。&lt;/p&gt;

&lt;p&gt;第二天和导师线上见面讨论了一下研究进度，顺便问了下葬礼的着装要求。导师回答说尽可能正式，于是上网搜了一下，说是黑衬衫不太合适，于是再次去购物。白衬衫黑领带口袋巾不说，来回试了几件西服外套，猜了猜尺码的意思，在肩宽和袖长之间找了个平衡，然后去买鞋。在我连续问了几款鞋子有没有黑色之后，鞋店大妈问我，你是想买自己喜欢的鞋子还是只要黑鞋子？我一听这是打算教我做人的道理了，于是诚实地说黑色就行。大妈中断片刻后继续施法，还是教育我说应该买我喜欢的鞋子，然后指给了我隔壁的百货商场。&lt;/p&gt;

&lt;p&gt;为了进一步防止着装出问题，于是想到了陈豪，问他要不要一起去，然后商量统一着装。于是周四下午，对着网上的教程打了个半温莎结，然后开车接上陈豪，前往教堂。&lt;/p&gt;

&lt;p&gt;我们到的时候已经有不少人在了，教堂大约由三个正方形空间并排而成，入口在中间一个大厅，进入后左侧是礼拜堂，右侧布置成了一个餐厅。维教授和夫人站在中间大厅靠近礼拜堂的一角，身旁地上撑着有一幅等身高的画像，画中一个少年挎着一个篮球，身着比赛服。大厅内的访客排成一个回环的长队，在访客名册上签字，再依次问候教授一家。系秘书萨拉和图书管理员艾莉森和我们几乎同时到，于是我们一起排队。环顾四周，发现我和陈豪两人穿得已经算是很正式了。现场的年轻人很多，白衬衫黑领带者多，穿外套者少；年长者则更不正式，衬衫不必纯白，鞋不必正黑，甚至有老者穿浅色套装。维教授一身黑衣，领口一个白领节。&lt;/p&gt;

&lt;p&gt;队伍前进很慢，我和陈豪就跟萨拉和艾莉森闲聊。我不太懂这种场合该聊什么，聊着聊着就聊到了我导师最近申请下来的一个大额研究资助，聊到了我们两个人打算什么时候毕业，倒也不是十分严肃。见到维教授的时候，也就是很普通地寒暄了两句，维教授的夫人还记得四五年前感恩节聚会的情形，感谢我们来参加这个仪式。我又代已经回国的松岩向教授致意。&lt;/p&gt;

&lt;p&gt;已经慰问过教授的访客分散在中央大厅里交谈，我们认识的人不多，回头看见唐学长和维教授之前的学生詹森一起排队，我们就返回队伍和他们聊了一会，依然是主要关于各自未来的打算。詹森有了孩子，现在为了奶粉钱又兼职了一家科技公司的远程工作；唐学长准备毕业，打算去纽约的医院找一些医学研究类的工作。齐学姐已经去了纽约的实验室，托唐学长带了一个花篮，和其他花篮一起摆在大厅中间的一个小桌上。今年新进入我们系的两位中国老师也来了，毕竟学生和老师之间还是有隔阂，我们没有去和他们说话。系主任和夫人来的较晚，带了一个小姑娘，不知道是女儿还是孙女。&lt;/p&gt;

&lt;p&gt;系主任到时，很多访客都已在礼拜堂落座，我们想找地方时礼拜堂已满，教堂在中间大厅靠礼拜堂左半边摆了七八排椅子，椅子上摆了一个小册子。我和陈豪相邻坐下，身旁是一对夫妻，男士是维教授曾经的学生，现在在医学院工作，和陈豪握了握手。女士坐在我身旁，仪式还没开始，就可以感觉到她在啜泣。大约维教授的亲学生，每年都会去教授家做客，应该是看着泰勒长大吧，就像我看导师家的孩子一样。&lt;/p&gt;

&lt;p&gt;新牧师上台，声音从礼拜堂门上方的一个小音箱传来。带领大家冥想之前说，他知道今天到场的人并不都信仰同一个上帝，大家可以把他说的神替代成自己信仰的至高。于是开始冥想，牧师引用了圣经、伊索和多萝西·代伊，声音流利温和。祈祷之后是合唱圣歌，歌词在小册子上，我不知道曲调，只能默默地听。我们右前方靠中间走廊的座位有一位女士，声音洪亮，不知道是平时的积极分子还是教堂安排的领唱。&lt;/p&gt;

&lt;p&gt;然后是亲友上台追忆泰勒的生平。最先上台的是泰勒的舅舅，两三句话之后泣不成声，一个劲地说他爱泰勒，爱所有人。之后是泰勒从幼儿园到高中的好朋友，回忆了和他一起玩的种种，一起在高中篮球队时对泰勒的受欢迎的羡慕。还有篮球队的教练，高中新认识的亚裔朋友，说他是怎样默默地关注着身边的每一个人，用最自然的方式把他们拉入谈话，让他们能够在一个集体中感到被接受。一个女孩子登台，中学的周末，两个人对家里说谎后去约会吃饭，然后在餐厅遇见双方的家人……她知道今天到场的这么多女孩子，几乎所有人都和她一样喜欢过泰勒，他值得这样的喜欢。&lt;/p&gt;

&lt;p&gt;又唱了另一首圣歌，牧师再次登台，说自杀让人困惑，安静的会场沉入了更深的安静，我们不理解，神还有很多安排让我们不理解。小册子的最后有关于自杀救助的热线，建议大家都记到自己的手机里。&lt;/p&gt;

&lt;p&gt;仪式结束后，想留下来陪伴家人的访客可以去旁边的大厅用餐。我们不知道礼数，于是问詹森和唐学长，他们都不打算留下，于是我们也一起离开。开车一路东行，后视镜一片眩目，夕阳薄暮，晚霞如血。&lt;/p&gt;

&lt;p&gt;开学前的一个星期是迎新周，作为研究生教学主管，维教授依惯例需要在迎新会上讲话，向研究生新生介绍项目教学计划。迎新活动的主办方是高年级学生组成的 mentor committee，committee 的头儿安鲁写信给卡教授，问他愿不愿意代替维教授出席。卡教授回复说他已经问过了，维教授觉得自己还能正常履职。作为 committee 的一员，维教授讲话的时候我也在场，介绍十分顺利，只是在教授对着幻灯片的一处幽默的时候，我不知道该做什么表情。&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Sep 2021 00:00:00 -0500</pubDate>
        <link>https://mountaye.github.io/blog/articles/taile-celebration-of-life</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/taile-celebration-of-life</guid>
        
        
      </item>
    
      <item>
        <title>.en | 达里奥关于滴滴及课外辅导的看法，及2篇相关文章</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;2011 年 7 月 30 日，桥水基金的达里奥最近对滴滴中止赴美上市和中国整治课外辅导两件事发表了看法。大陆的很多财经自媒体对这篇文章进行了转述，但是并没有引用原文。周末读了一下，至少我对原文的理解，和财经自媒体所称达里奥的观点不同。所以翻译一下，供参考。&lt;/p&gt;

  &lt;p&gt;在找原文的过程中，还发现了一篇刊登于 2021 年 7 月 11 日日经亚洲板块的观点性文章，对达里奥的文章更早的一篇《不要对变化世界中的中国崛起视而不见》进行了反驳，遂将达里奥此文与反驳一并翻译，附于后。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;0&quot;&gt;0&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;2011 年 7 月 30 日，原文 &lt;a href=&quot;https://www.linkedin.com/pulse/understanding-chinas-recent-moves-its-capital-markets-ray-dalio/&quot;&gt;发表于 LinkedIn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近中国与—— 1）滴滴的上市和对其数据使用的控制以及 2）中国教育公司正被转为非营利组织——有关的政策举措，让人对中国的资本主义和资本市场产生了很多怀疑，所以我想帮助澄清一下那里发生了什么事。&lt;/p&gt;

&lt;p&gt;我知道这让不了解正在发生的事情的人感到困惑。自从我36年前开始去中国以来，我发现大多数与政策制定者没有直接接触、没有详细了解变化趋势的西方观察家们，往往不相信中国共产党真的是在用资本市场促进发展。他们将最近这两个举措解释为共产党领导人显示了他们真正的反资本主义的，尽管过去 40 年来的趋势已经明显地朝向用资本市场发展市场经济，并在这个过程中让企业家和资本家变得富有。结果，他们误解了中国正在发生的事情，并且可能会继续误解。这一回，政策制定者向滴滴表示，进行上市可能不是最好的选择，政府很容易让人理解地希望处理数据隐私问题。就教育辅导公司而言，政府希望减少教育不平等，和那些急于让孩子获得这些服务但又负担不起的人的经济负担，通过广泛提供这些服务。他们认为，这些东西对国家更好，即使股东不喜欢。&lt;/p&gt;

&lt;p&gt;我记得有许多类似的误解。例如，我记得中国散户投资者泡沫破灭导致政府购买股票，然后政府试图操纵市场一段时间。我还记得中国央行在 2015-16 年间因扩大 &lt;a href=&quot;https://www.investopedia.com/terms/c/currency-band.asp&quot;&gt;汇率区间&lt;/a&gt; 而导致人民币暴跌，以及这如何导致许多投资者将这些发展作为政策制定者正在远离发展中的资本市场的证据。一些持怀疑态度的投资者认为这些举措是不恰当的反自由市场的干预，尽管这些举措在许多资本主义市场已经多次发生，尽管美国和其他发达市场的财政和货币政策干预使中国政府对其市场的干预相形见绌. 通过它，所有中国决策者都成功地应对了影响并实现了他们的目标；即，他们的行动方向从未改变。这个方向就是支持稳定快速发展资本市场、企业家精神、对外国投资者的开放程度。所以我鼓励你看看趋势，不要误解和过度关注摆动。&lt;/p&gt;

&lt;p&gt;要了解正在发生的事情，您需要了解中国是一个国家资本主义体制，这意味着国家运行资本主义，为了为大多数人的利益服务，政策制定者不会让资本市场的敏感性和富裕资本家，挡住他们认为最适合该国大多数人的道路。相反，资本市场中的人和资本家必须了解他们在体制中的从属地位，否则他们将承担自己错误的后果。例如，他们需要纠正认为自己的财富有权决定事情发展方向的错误。&lt;/p&gt;

&lt;p&gt;您还需要了解，在这个快速发展的资本市场环境中，中国监管机构正在探索适当的法规，因此，当法规变化迅速且不明确时，会导致此类混乱，这可能会被误解为反资本主义举措.&lt;/p&gt;

&lt;p&gt;此外，您需要了解全球地缘政治环境的变化会导致一些变化。你可以看到这反映在美国政府的政策转变上，例如 a) 改变对中国公司在美国上市的政策和 b) 威胁禁止美国养老基金在中国投资。&lt;/p&gt;

&lt;p&gt;假设这样的事情将来会发生，并以此为依据进行投资。但不要将这些波动误解为趋势的变化，也不要指望这种中国国有资本主义与西方资本主义完全一样。&lt;/p&gt;

&lt;p&gt;话虽如此，我确实认为不幸的是，中国的决策者没有更清楚地公开表达他们行动背后的原因。&lt;/p&gt;

&lt;p&gt;至于投资，在我看来，美国和中国的体制和市场都有机会和风险，很可能相互竞争，相互多元化。因此，它们都应该被视为一个人的投资组合的重要组成部分。我敦促您不要将此类举动误解为对过去几十年存在的趋势的逆转，并让它吓跑您。&lt;/p&gt;

&lt;h2 id=&quot;1&quot;&gt;1&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;达里奥 2020 年 10 月 23 日在 &lt;a href=&quot;https://www.ft.com/content/8749b742-d3c9-41b4-910e-80e8693c36e6&quot;&gt;《Financial Times》上的一个专栏&lt;/a&gt;，原文标题为 “Don’t be blind to China’s rise in a changing world”.&lt;/p&gt;

  &lt;p&gt;原文有付费墙，译文基于 &lt;a href=&quot;https://thefinanceinfo.com/2020/10/23/dont-be-blind-to-chinas-rise-in-a-changing-world/&quot;&gt;这个连接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作者为桥水联合创始人、联席董事长兼联席首席投资官&lt;/p&gt;

&lt;p&gt;从我记事起，人们就说中国不可能成功。共产主义行不通。威权主义行不通。中国人没有创造力。他们在坏账和房地产投机方面有很大的问题。然而，我们每天都看到中国以非凡的方式取得成功。&lt;/p&gt;

&lt;p&gt;它实现了一些世界上最低的 Covid-19 病例率。在过去的一年里，其经济增长了近 5%，没有将债务货币化，而所有主要经济体都在收缩。中国的生产多于消费，国际收支顺差，与美国和许多西方国家不同。今年，全球近一半的首次公开募股将在中国进行，其中包括蚂蚁金服 300 亿美元的上市，这是全球有史以来规模最大的一次。甚至特斯拉最畅销的 Model 3 汽车也可能很快就会完全在中国制造。&lt;/p&gt;

&lt;p&gt;世界秩序正在发生变化，但由于持续存在的反华偏见，许多人忽略了这一点。中国的非凡表现并不新鲜。事实上，除了1839-1949年的“百年屈辱”外，它在历史上一直是世界上最强大的国家和文化之一。就在过去的四年里，它的经济变化是显着的。无论你对中国的“国家资本主义”有什么批评，你都不能说它没有用，即使你强烈反对北京的做法。&lt;/p&gt;

&lt;p&gt;36年前我第一次访问中国时，我会给高级官员10美元的袖珍计算器。他们认为它们是奇迹装置。现在中国在先进技术上与美国匹敌，并且可能会在五年内领先。自 1984 年以来，人均收入增长了 30 多倍，预期寿命增加了十年，贫困率几乎降至零。 1990年，中国第一个股票市场由我认识的七位爱国青年设计。从那时起，它已成为世界第二大。&lt;/p&gt;

&lt;p&gt;所有这些都是在说，中国的崛起具有巨大的政治、经济和投资影响。在政治上，中国已成为美国两党面临的主要问题，美国担心中国崛起，扩大全球影响力，并且拒绝其威权模式和对待新疆维吾尔族穆斯林等少数民族的方式。中方的反驳是，维护秩序需要强有力的手，在其境内发生的事情是自己的事，美国有自己的人权问题。它对台湾、香港等地区的主权也是争议很大的大问题。没有人知道这些紧张局势将如何发展，但它们会影响我们所有人。&lt;/p&gt;

&lt;p&gt;与此同时，中国的经济规模与美国大致相当，而且扩张速度更快——所以时间站在中国一边。它拥有不断增长的受过良好教育的人口，约占世界科技大学专业的三分之一，是美国的三倍。它还产生和收集更多数据以使用人工智能进行处理。对于西方的许多人来说，这在国家监视方面有阴暗面。但对许多中国人来说，它强化了积极的社会规范，同时也带来了巨大的效率。看待中国相对实力的一种方式是，在人口是美国四倍的情况下，当其人均收入在大约 25 年内达到美国的一半时，其经济规模将是美国的两倍。&lt;/p&gt;

&lt;p&gt;最后，还有投资影响。作为一名全球宏观投资者，关于我应该在何处投资多少，查看基本面以及其他人的仓位，我考虑得很多。中国基本面强劲，资产定价相对有吸引力，全球都在减持中国股票和债券。这些目前占外国投资组合持有量的 3% 或更少；中性权重将接近 15%。&lt;/p&gt;

&lt;p&gt;这种差异至少部分是由于反华偏见。我认为它即将改变。中国市场正在向外国人开放，他们现在至少可以进入其中的 60%，而 2015 年为 1%。主要指数的基准权重正在上升。因此，我预计中国将享受有利的资本流入，这将支持已经处于两年高位的货币和金融市场。所有这些都促使我在投资组合中增持了中国。&lt;/p&gt;

&lt;p&gt;当然，任何国家都可能出现问题。北京可能不会坚持目前的经济改革进程，尽管我怀疑这会发生。美国和中国也在贸易、技术、地缘政治、资本市场和军事力量方面展开激烈竞争——有人说是交战。没有人知道这些战争会有多严重，哪个国家会获胜，或者如何获胜。这就是为什么我将资金分散到这两个国家。&lt;/p&gt;

&lt;p&gt;从长远来看，永恒和普遍的真理决定了国家成功或失败的原因。简而言之，当帝国生产力高、财务状况良好、收入多于支出、资产增长快于负债时，帝国就会崛起。这种情况往往发生于他们的人民受过良好教育，努力工作时，并举止文明之时。 正如我在一项正在进行的研究中记录的那样，客观地将中国与美国在这些措施上进行比较，基本面显然有利于中国。&lt;/p&gt;

&lt;p&gt;偏见和偏见总是让人们看不到机会。 所以，如果你因为与中国发生的事情不符的原因而对中国持怀疑态度，我建议你理清思路。 美国的事件及其在不断变化的世界中的地位也是如此。 美国大选前夕是反思两者的好时机。&lt;/p&gt;

&lt;h2 id=&quot;-1&quot;&gt;-1&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;日经亚洲板块对上文的 &lt;a href=&quot;https://asia.nikkei.com/Opinion/Why-Ray-Dalio-is-wrong-about-China&quot;&gt;一个反驳&lt;/a&gt;，作者是 Andrew Hunt 和 Ben Ashby，发布于 2021 年 7 月 11 日&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Andrew Hunt 是 Hunt Economics 的首席执行官，也是 Dresdner Asset Management 在亚洲的前顾问。Ben Ashby 是摩根大通首席投资办公室的前董事总经理。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;高盛与中国工商银行（ICBC）的新财富管理合资企业，和对冲基金亿万富翁Ray Dalio有什么共同点？他们都是希望更多地接触中国金融市场的全球金融投资者的一部分，因为他们认为中国的崛起是不可避免的。我们认为他们错了。&lt;/p&gt;

&lt;p&gt;我们认为，达利欧在2020 年 10 月 23 日发表在《金融时报》上的专栏《不要对中国在不断变化的世界中的崛起视而不见》中提出的许多论点今天都可能被证明是错误的，而其他观点可能随着时间的推移也会被证明是错误的。中国市场很可能对外国人“开放”，但是否保证他们有更多的资本是另一回事。&lt;/p&gt;

&lt;p&gt;乍一看，更多中国储蓄进入金融市场的前景似乎证明了这种兴奋是合理的，中国证券将成为全球投资者投资组合的更大一部分。&lt;/p&gt;

&lt;p&gt;我们计算出，按当前汇率计算，至少需要 6 万亿美元的海外资产来重新平衡国内储户的存款密集型投资组合，使其分布类似于中国邻国的分布。而且，正如达利欧在英国《金融时报》中指出的那样，“世界正在减持中国股票和债券”，它们占外国投资组合的 3% 或更少，而不是接近 15% 的“自然”权重。&lt;/p&gt;

&lt;p&gt;到目前为止，如此真实。但许多国际金融机构希望，金融部门政策的“正常化”、投资组合的重新平衡和持续的债务推动的增长将创造一笔横财，他们现在应该为自己建仓。这就是我们不同的地方：我们预计在可预见的未来不会发生任何根本性的变化，由于中国经济的现实。&lt;/p&gt;

&lt;p&gt;该国的大部分家庭财富仍存留在银行账户中，而且对外流动受到严格控制。因此，银行体系庞大：中国在全球存款中所占的份额大约是其在全球国内生产总值中所占份额的两倍。&lt;/p&gt;

&lt;p&gt;不过，中资银行的主要职能是促进政府政策，促进符合中国共产党原则的经济发展。他们必须确保关键部门有现成的廉价信贷供应，支持实现经济的产出最大化，而非利润。&lt;/p&gt;

&lt;p&gt;自 1980 年代后期经济改革开始以来，这种模式必然助长了更广泛的企业部门的赤字。我们估计，平均短缺每年相当于 GDP 的 16%。这必然会影响贷款、储蓄和监管。&lt;/p&gt;

&lt;p&gt;为支撑经济，抑制融资成本；在过去四十年的大部分时间里，实际利率一直为负。自然，不愿向借款人收取高额费用对储户来说意义更小。但是已经实施了严格的监管，严格控制资本流动，以确保他们将大部分财富留在银行。&lt;/p&gt;

&lt;p&gt;如果中国政府考虑将其做法正常化，将面临艰难的选择。当局可以允许市场将资金分配给寻求利润最大化的公司，或者他们可以继续将资本引导到许多破坏股东价值的公司。在后一种情况下，投资者将不得不接受中国的金融市场没有真正的经济目的，长期回报可能会受到限制。&lt;/p&gt;

&lt;p&gt;正如著名投资者本·格雷厄姆所说，“股市在短期内可能是一台投票机，但随着时间的推移，它是一台称重机。”&lt;/p&gt;

&lt;p&gt;如果没有利润最大化的潜在驱动力，中国股票就很难达到投资者预期的回报。这意味着该国的储蓄者可能会与任何遵循 Dalio 的 GDP 称重方法的长期被动投资者一起失败——这一策略在 1990 年代后期的亚洲金融危机期间失败了。但企业行为的任何巨变都不符合政策制定者的经济目标。&lt;/p&gt;

&lt;p&gt;如果允许更多的国内资金离开该国，也会出现困难局面。对储蓄市场的任何放松管制都可能将中国宝贵的外汇储备消耗到一个危险的低水平。&lt;/p&gt;

&lt;p&gt;尽管这些储备的名义价值很大，但它们是否足以满足中国这样规模的经济体的需求仍然是一个悬而未决的问题。此外，如果储户要根据区域标准进行再平衡，我们认为银行系统将面临至少 180% 的贷存比，从而阻碍其向企业提供廉价信贷的主要功能。公司的融资成本也将飙升，引发大量重组，进一步损害投资者回报。&lt;/p&gt;

&lt;p&gt;在可预见的未来，中国的银行和企业根本无法承受国内储蓄的流失。即使这些储蓄被锁在家里，前景也越来越消极。由于债务负担已经很高，经济放缓，加上多年不景气的贷款后不良贷款比例不断增加，中资银行将越来越挣扎，其发放新贷款的能力将下降。这在一定程度上解释了中国吸引更多外国投资者的动机。有希望的正常化和确保新的资本来源有助于推迟艰难的决定。&lt;/p&gt;

&lt;p&gt;这一切都在达利欧几乎没有提到的实际考虑之前，例如将资金投入到一个有资本管制的国家或满足国内监管机构和投资者的需求的影响，特别是当他们越来越关注环境、社会和治理原则时，如以及应对日益激烈和紧张的地缘政治竞争。没有人知道这一切的正确风险溢价是多少。&lt;/p&gt;

&lt;p&gt;在任何像中国这样规模的市场中，投资者都将有较早获得轻松获利的机会。鉴于对冲基金倾向于短期投资，Dalio 可能会获利。但我们认为潜在的回报最终会消退。&lt;/p&gt;

&lt;p&gt;更糟糕的是，如果中国无法改革国内经济，或者国际政治局势进一步恶化，甚至撤资都可能成为问题。如果发生这种情况，仓促进入的投资者和公司将有时间悠闲地忏悔。&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Aug 2021 00:00:00 -0500</pubDate>
        <link>https://mountaye.github.io/blog/articles/translate-dalio-on-china-and-arguments</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/translate-dalio-on-china-and-arguments</guid>
        
        
      </item>
    
      <item>
        <title>.py | 笔记：python 编辑器、解释器、虚拟环境</title>
        <description>&lt;p&gt;上一篇 《&lt;a href=&quot;/blog/articles/python-installation-and-configuration&quot;&gt;在 Windows 10 上配置 python 开发环境&lt;/a&gt;》 很惭愧，只做了一点微小的工作，大概三件事：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个，安装了 python 的解释器；&lt;/li&gt;
  &lt;li&gt;第二个，把 vscode 安装进了电脑；&lt;/li&gt;
  &lt;li&gt;第三个，就是我们知道的 virtualenv 虚拟环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果说还有一点什么要讲的，就是在 how 之外，讲一点 what。为了让文章更通顺一点，我打算调整一下顺序，先讲编辑器，再讲解释器，最后再说虚拟环境。虽然文章是立足于 python 来谈，但是这些知识适用于几乎所有通用编程语言。因为我也不是计算机专业出身，这篇文章只是我的学习笔记，如果有不对的地方欢迎大家指出。&lt;/p&gt;

&lt;h2 id=&quot;编辑器&quot;&gt;编辑器&lt;/h2&gt;

&lt;p&gt;首先我们来做一个实验，把上次教程里创建的 python 文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.py&lt;/code&gt; 重命名，把拓展名 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt;, 然后双击鼠标打开文件，会发生什么？在 Windows 系统里，会弹出最最普通的记事本窗口，窗口里是白底黑字的 python 语句，不像 vscode 里面不同语句有不同颜色，但是内容完全一样。&lt;/p&gt;

&lt;p&gt;甚至更进一步，你可以在命令行里直接让 python 编译器执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; 文件的内容，（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;py -m hello.txt&lt;/code&gt;）效果和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 也是一样的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 这个拓展名什么也没有做，和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt; 文件一样，内容就是一串我们人类能够读懂的字符，这样的文件叫做&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6&quot;&gt;文本文件&lt;/a&gt;。处理文本文件的程序，就叫做&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;编辑器&lt;/a&gt;。记事本就是一种编辑器，vscode 也是。&lt;/p&gt;

&lt;p&gt;既然记事本就可以编写 python 代码，那我还费劲安装 vscode 干嘛？确实有人真的只用记事本或其他操作系统自带的编辑器写 python 代码，（油管上还有一个视频是用 Microsoft Word 写代码；）然后用命令行调试程序，但是 vscode 毕竟是专为程序员而开发，提供了很多默认编辑器不具备的功能，比如前面提到将函数、变量、保留词显示成不同的颜色的语法高亮功能。&lt;/p&gt;

&lt;h2 id=&quot;编译器--解释器&quot;&gt;编译器 / 解释器&lt;/h2&gt;

&lt;p&gt;除了文本文件，这篇文章里涉及的第二种文件是&lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_file&quot;&gt;二进制文件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;电脑并不能直接看懂人类认识的字符，在一切的最底层，经典计算机认识的是以不同方式表示的 0 和 1。虽然说所有文件在底层都是二进制的文件，但是“二进制文件”这个名词一般专门用来表示除了文本文件之外的文件，又因为图片文件、视频文件啥的都有自己的名字，所以这个词用来指代的文件，基本上都和软件程序，可以让计算机执行的文件有关。&lt;/p&gt;

&lt;p&gt;人类只认识字符，计算机只认识 0 和 1，那么最直觉的思路就是把文本文件翻译成二进制文件。这个翻译过程叫做&lt;a href=&quot;https://en.wikipedia.org/wiki/Compiler&quot;&gt;编译&lt;/a&gt;，能够完成这一过程的软件就叫做编译器。编译器编译完成之后就退出了，要想执行程序，电脑直接执行编译之后的可执行文件就可以了。&lt;/p&gt;

&lt;p&gt;但是编译存在一个问题，就是整个软件需要在所有的源代码文本文件都写好的情况下才能被编译成软件，编译耗费的资源和时间随着软件规模的增长而扩大；一旦修改某处，整个项目又要重新编译。很多时候我们只想快速地知道某个大型项目中的某一句命令的效果是什么，编译这种方法就不适合这种场景了。&lt;/p&gt;

&lt;p&gt;于是就出现了&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_(computing)&quot;&gt;解释器&lt;/a&gt;，这种程序比编译器复杂的多，在我们执行这种编程语言命令的时候始终运行，允许我们一句一句地输入命令，记得代码的上下文，还记得我们之前命令的结果，代价就是对于大型项目也需要一句一句地分析解释，计算资源的开销和速度都不如编译。&lt;/p&gt;

&lt;p&gt;python 就是一种（官方实现）使用解释器的编程语言，我们在官网下载的那个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-***.exe&lt;/code&gt; 文件就是 python 的解释器。这也导致了 python 程序的性能往往不如同水平的 C/C++ 程序员写出来的程序，但是由于单句执行适合试错，所以在 &lt;del&gt;经常犯错的&lt;/del&gt; 科研领域还挺流行的。&lt;/p&gt;

&lt;p&gt;当然了，python 的特点远不仅仅是解释型语言这么简单，它还是一种：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2009/08/why-choose-python-1-script.html&quot;&gt;脚本语言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2009/08/why-choose-python-2-dynamic.html&quot;&gt;动态语言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html&quot;&gt;面向对象语言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html&quot;&gt;函数式编程语言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2010/08/why-choose-python-3-oop.html&quot;&gt;……&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;虚拟环境&quot;&gt;虚拟环境&lt;/h2&gt;

&lt;p&gt;有一次我问我女朋友，她写 python 用什么 IDE，她很自豪地回答，她的 Macbook 自带 python，直接在命令行就可以运行……答非所问还不是最大的问题（仔细想想好像也不是答非所问，不过只回答了问题的一部分），而是直接在命令行运行系统自带的 python，或者其他编程语言的解释器或者编译器，本身就是编程初学者常干的一种危险行为。&lt;/p&gt;

&lt;p&gt;Windows 还好，毕竟这是一个面向广大家用消费者的操作系统，防呆设计还是挺多的，没有原装的 python。更加极客向的操作系统，比如 Linux 和 BSD 家族可就不一样了，这些操作系统（的发行版）往往预装了 python。这个 python 可不是给用户拿来开发自己的程序用的，而是用来让很多 python 语言写成的操作系统工具调用的。既然如此，这个 python 的版本一般由发行版的安装包管理者来控制，往往落后最新的 python 版本一段时间，为了避免新版本 python 有什么 bug，也为了让操作系统工具的开发者有时间更新自己的代码。所以如果直接用这个版本的 python 做开发，而且不小心自己升级了 python 的版本，很有可能导致系统的某些功能失常。&lt;/p&gt;

&lt;p&gt;虚拟环境就是 python 对这个问题的解决方案。我们可以安装不同于原装 python 的版本，但是并不将这个解释器加入系统路径，操作系统也就不知道这个版本 python 的存在。创建虚拟环境的时候，我们指定使用这一特定版本的 python，这样在虚拟环境激活之后就是我们开发需要的 python，退出虚拟环境就是系统工具使用的 python。&lt;/p&gt;

&lt;p&gt;另外，即便两个项目适用于同一个 python 版本，而且都是系统自带的这个版本，虚拟环境也有用武之地。绝大多数程序都需要依赖别人写好的工具代码，这些代码叫做库 (library)，不同的项目可能依赖不同的库代码，或者同一个库的不同版本。这个时候，可以创建不同的虚拟环境，并在其中安装各个项目对应的库，项目之间可以互不影响。&lt;/p&gt;

&lt;h2 id=&quot;编辑器--解释器--编译器--虚拟环境管理----ide&quot;&gt;编辑器 + 解释器 / 编译器 + 虚拟环境管理 + …… = IDE&lt;/h2&gt;

&lt;p&gt;为了开发 python 程序要安装这么多不同的程序，太麻烦了，就不能一键安装全搞定吗？当然可以了，这种集成了开发过程中用到的各种工具的程序，就叫做&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83&quot;&gt;集成开发环境 (IDE)&lt;/a&gt;。对于 python，最有名的 IDE 当属 &lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt; 了。&lt;/p&gt;

&lt;p&gt;那我为什么不用呢？当然用过，但是听说了 vscode 的大名，而且尝鲜之后，就再也回不去了。写 python 需要编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.py&lt;/code&gt; 文件，写博客需要编辑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; 文件，博客的一些功能需要 JavaScript 实现，这些事情本质上都是编辑文本文件这一件事，在 vscode 这样的编辑器里全搞定就再自然不过了，那么 Anaconda 里的 Spyder 和 Jupyter Lab 就显得多余了。&lt;/p&gt;

&lt;p&gt;“把一件事做好”，这也是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Unix%E5%93%B2%E5%AD%A6&quot;&gt;Unix 哲学&lt;/a&gt;的一部分。但是问题在于，不同的人对于“一件事”的定义是不同的，有些人觉得做早饭是一件事，有些人觉得是热牛奶煎鸡蛋烤面包等等好几件事，谁是对的？&lt;/p&gt;

&lt;p&gt;也许都对，但是 编辑器 + 解释器 + …… 比起 IDE 就是处在鄙视链的上游。这一点可以不同意，但是应该要知道，不然别人抖包袱的时候你没捧上哏，挺尴尬的。&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Jun 2021 00:00:00 -0500</pubDate>
        <link>https://mountaye.github.io/blog/articles/python-interpreter-editor-virtualenv</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/python-interpreter-editor-virtualenv</guid>
        
        
      </item>
    
      <item>
        <title>.exe | 《文明6》娱乐局战报：被罗马吊打的法兰西</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;前几天在微信公众号，有新关注的读者问我最近在进行什么项目，我说 python 教程还在写，结果这次的更新是……请大家相信我，python 教程第 2 篇真的在写了（新建 markdown 文档.gif），我打算聊一聊上篇实操指南背后究竟在干什么，什么是编程语言的解释器、编辑器、python 的虚拟环境等等……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每周一次的《文明6》游戏还在火热进行中。自从第一次参加，用格鲁吉亚的塔玛丽被唐学长的马普切放置 play 之后，发愤图强，业余时间基本上都在看油管上的视频战报学技术，最终在上一局，极大地球图中用彼得，在唐学长开局被 AI 偷袭，和朱学长中途退赛的情况下，和朱学长身后留下的 AI 势均力敌，并且在与其之战争中占据上风，有望拿下比赛。虽然最后由于交战拖垮了网络连接而提前结束，但毕竟是巨大的进步。&lt;/p&gt;

&lt;p&gt;于是老子就飘了，觉得这次朱学长不在，可以和唐哥掰掰手腕了。结果十分丢人现眼，150 回合不到，人家已经开始建宇航中心了，而且文化并不比我落后，旅游业绩甚至超过我。&lt;/p&gt;

&lt;p&gt;怎么可能呢？于是分别以我和他的视角加载游戏，看看差距到底在哪里。本来以为我是有定期存档的，结果发现手头只有 22 回合和 144 回合的存档，才想起来第一次游戏到一半的时候就发现自己的科技被甩开了，于是自暴自弃了。虽然这样的学习价值不大了，但还是姑且写完这篇文章，算是有始有终吧。&lt;/p&gt;

&lt;h2 id=&quot;偷师&quot;&gt;偷师&lt;/h2&gt;

&lt;p&gt;在此之前，游戏结束如果比较早的话，会和肖学姐，也就是唐学长的女朋友打听一点经验攻略，再加上自己的观察以及油管，以及之前接手过朱学长跑路后留下的位置，汇总成以下的经验总结：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;早期的文化非常重要。平伽拉是早期总督的首选。&lt;/li&gt;
  &lt;li&gt;产能主要来自地貌的改良，建立工业区之前达到每城 30 “即可”。&lt;/li&gt;
  &lt;li&gt;工人，很多很多工人。&lt;/li&gt;
  &lt;li&gt;第一个时代进入黄金时代很重要，哪怕只是金币打折买工人也很赚。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;对比&quot;&gt;对比&lt;/h2&gt;

&lt;p&gt;以下是对比内容，法国从右往左看，罗马从左往右。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;法兰西 (144 回合)&lt;/th&gt;
      &lt;th&gt;法兰西 (22 回合)&lt;/th&gt;
      &lt;th&gt;对比&lt;/th&gt;
      &lt;th&gt;罗马 (22 回合)&lt;/th&gt;
      &lt;th&gt;罗马 (144 回合)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;法国中部、南德和奥地利、多瑙河流域丘陵森林&lt;/td&gt;
      &lt;td&gt;法国平原，平原多，邻国多且近，粮少树少&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;地理位置&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;亚平宁半岛，面积小，沿海，草原丘陵多，树多&lt;/td&gt;
      &lt;td&gt;亚平宁半岛、西西里岛、法国西南、巴尔干西北&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4科研、2军事、1商业、1宗教、1工业，3座城邦完全没有使者&lt;/td&gt;
      &lt;td&gt;首发1科研，发现1工业城邦&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;城邦&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;首发1商业、1宗教，发现1科研城邦&lt;/td&gt;
      &lt;td&gt;3科研、2军事、1商业、1宗教，使者均超过6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9邻国，缺埃及，对西班牙开战&lt;/td&gt;
      &lt;td&gt;德国、英国、罗马&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;邻国&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;法国&lt;/td&gt;
      &lt;td&gt;10邻国&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;发现4座自然奇观，无一控制&lt;/td&gt;
      &lt;td&gt;英国白崖&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;奇观&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;维苏威火山、马特洪峰&lt;/td&gt;
      &lt;td&gt;马特洪峰2格，维苏威火山3格处坐城&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7座己方城市、1座占领城市、1俘虏开拓者，多数10人口，最多13&lt;/td&gt;
      &lt;td&gt;1城市，0开拓者（剩1回合），10锤0粮&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;城市&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1城市，2开拓者&lt;/td&gt;
      &lt;td&gt;11城，多数10人口，最多14人口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3骑兵军团、2骑兵、1骑士军团、1骑士、1射石炮、1勇士、4闲置巨作伟人，2间谍，4商人，1外商&lt;/td&gt;
      &lt;td&gt;1侦察、1勇士、1骑手&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;单位&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1勇士、1侦察、1英雄&lt;/td&gt;
      &lt;td&gt;侦察兵、机关枪队、直升机、罗马军团、四段帆船、私掠船、装甲舰、轻快帆船、14商路，外商为主&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;无工人&lt;/td&gt;
      &lt;td&gt;1名1锤工人、2改良&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;工人&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1名4锤工人，0改良&lt;/td&gt;
      &lt;td&gt;4工人，共6锤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5文化区、3学院区、3商业区、2娱乐区、3工业区、7水渠、2军营、外交区、市政广场&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;区域&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1文化区、8学院区、3商业区、8港口、3娱乐区、5工业区、3保护区、1圣地、1飞机场、1军营、外交区、市政广场&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;（谒见厅、情报局）&lt;/td&gt;
      &lt;td&gt;1纪念碑&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;建筑&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;除免费纪念碑外，0建筑&lt;/td&gt;
      &lt;td&gt;（祠堂、外交部），几乎所有城市都没有下水道，区域建筑拉满，少数港口无码头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;奇观&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;13，大浴场、墨索拉斯王陵、（大图书馆、马丘比丘、基尔瓦吉斯瓦尼、休伊神庙、罗马斗兽场、大本钟）、（巨像、大灯塔、紫禁城、牛津大学）、鲁尔山谷&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3级平伽拉、左1右2马格努斯、右1瑞纳&lt;/td&gt;
      &lt;td&gt;0级平伽拉&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;总督&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;0级梁&lt;/td&gt;
      &lt;td&gt;新城左2右1梁，右1马格努斯，左1瑞纳，0级平伽拉&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;民主主义，只有剧院相邻加成，奇观工人产能加成、战时政策为主&lt;/td&gt;
      &lt;td&gt;酋邦，忘了撤信仰卡&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;政体&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;酋邦&lt;/td&gt;
      &lt;td&gt;商人共和，工商学相邻加成、学院人口加成&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+29&lt;/td&gt;
      &lt;td&gt;+1，大地女神&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;宗教&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;+2，尚未建立万神殿&lt;/td&gt;
      &lt;td&gt;+94，开拓者+1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+128.2&lt;/td&gt;
      &lt;td&gt;+5.1，3科技，3尤里卡，0解锁区域&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;科技&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;+5，4科技，2尤里卡，0解锁区域&lt;/td&gt;
      &lt;td&gt;+501.3，人口、外交办&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+207.3 (+260~)&lt;/td&gt;
      &lt;td&gt;+5.6，2文化，1鼓舞，0解锁区域&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;文化&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;+4，2文化，1鼓舞，0解锁区域&lt;/td&gt;
      &lt;td&gt;+166.3，工作坊提供文化？奇观为主，巨作出售&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+45.5, 1505金币，1间谍&lt;/td&gt;
      &lt;td&gt;+11，99金币&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;经济&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;+10，154金币&lt;/td&gt;
      &lt;td&gt;+553.3，4532金币&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;阿南西，未重召&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;英雄&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;辛巴达，刚刚召唤&lt;/td&gt;
      &lt;td&gt;未重召&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;文化结社前2&lt;/td&gt;
      &lt;td&gt;未选择，只发现宗教结社&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;结社&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;未选择，已发现宗教、文化、科技结社&lt;/td&gt;
      &lt;td&gt;宗教结社前2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;有一个很诡异的现象：当我以不同的身份加载游戏时，各个玩家的数据是不同的。以罗马视角来看，法国的文化超过 260，但在法国看来自己只有 207；法国看到的罗马有 586 科研，210 文化，罗马自己看到的是 501 科研和 166 文化。&lt;/p&gt;

&lt;h2 id=&quot;本局经验&quot;&gt;本局经验&lt;/h2&gt;

&lt;p&gt;虽然输了之后哔哔赖赖很没品，但还是要说，以罗马身份进入游戏的时候我就知道，这局自己真的没有赢面。罗马本身就是强势文明，地形以草原丘陵为主，粮食和产能都不缺，我的起始点几乎全是平原，粮食和产能都不够。而且罗马的周围城邦众多，我的附近则是直接竞争的其他真人玩家。这局游戏是唐学长建的房间，等我们加入的时候他就已经选好了罗马，我觉得选法国已经算是一个次优的选择了。&lt;/p&gt;

&lt;p&gt;回过头来看，我在很多方面做的还是不错的。比如在进入游戏之前就决定了要以文化胜利为目标，没有分心太多在科研上。比如地理知识比美国同学好，一路向东进入南德和多瑙河流域的丘陵，把游戏中的德国挤压在了缺乏产能的平原地区，而且分割成了两块。更利用文化上的优势使得德国贴脸的城市叛变，并且早作准备从蛮族手里买来2个骑手，2回合城市易帜。&lt;/p&gt;

&lt;p&gt;但是依然有很多选择时候看来并非最佳。我获得万神殿比较早，当时有机会拿到移民 +1，但是我觉得法国并非宗教文明，争取文化胜利又需要用信仰买自然学家，于是选择了大地女神，结果这直接导致罗马开局就有 4 移民，以后滚雪球的差距也就不意外了。另外，对于奇观和伟人的了解显然不如对方，比如大工程师达芬奇配合墨索拉斯王陵，为罗马的每座工作坊提供了6点文化，而我在之前连达芬奇的效果都不知道，看到这波操作直呼开挂。&lt;/p&gt;

&lt;h2 id=&quot;全局经验&quot;&gt;全局经验&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;总督还是要因地制宜。罗马本次平伽拉仅仅是任命而已，上来先任命的是提高工人使用次数的梁&lt;/li&gt;
  &lt;li&gt;工业区的数量不需要太多，由于之前的产能不足恐惧症，这次的工业区建的有点魔怔了，工业区应当根据人口数量配合商业区和自己的目标。&lt;/li&gt;
  &lt;li&gt;商业区和港口的作用被低估了，商路区域应当尽快每城一座，金币购买建筑效果拔群。&lt;/li&gt;
  &lt;li&gt;市政广场没必要与剧院相邻。&lt;/li&gt;
  &lt;li&gt;娱乐区的作用不止在于为剧院广场提供相邻加成，宜居度本身就很重要。&lt;/li&gt;
  &lt;li&gt;战争经验依然不足，解决 AI 的速度依然慢了一些。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;……&lt;/h2&gt;

&lt;p&gt;在破解罗马超高文化谜团的过程中发现了这个网页，应该非常有用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://civilization.fandom.com/wiki/Victory_(Civ6)&quot;&gt;https://civilization.fandom.com/wiki/Victory_(Civ6)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最后贴几张战略模式的截图吧，许愿《文明7》能够像 P 社游戏一样给战时的军事单位移动加上那种很带感的箭头。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-05-26-rome-turn144.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-05-26-france-turn144.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/photos/2021-05-26-spain-turn144.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 26 May 2021 00:00:00 -0500</pubDate>
        <link>https://mountaye.github.io/blog/articles/civ6-game-review-france-vs-rome</link>
        <guid isPermaLink="true">https://mountaye.github.io/blog/articles/civ6-game-review-france-vs-rome</guid>
        
        
      </item>
    
  </channel>
</rss>
